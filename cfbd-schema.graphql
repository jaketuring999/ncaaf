schema {
  query: query_root
  subscription: subscription_root
}
scalar bigint
scalar division
scalar game_status
scalar home_away
scalar media_type
scalar numeric
scalar player_adjusted_metric_type
scalar recruit_type
scalar season_type
scalar smallint
scalar timestamp
scalar timestamptz
"""
columns and relationships of "adjusted_player_metrics"
"""
type AdjustedPlayerMetrics {
  "An object relationship"
  athlete: Athlete!
  athleteId: bigint!
  metricType: player_adjusted_metric_type!
  metricValue: numeric!
  plays: smallint
  year: smallint!
}
"""
aggregated selection of "adjusted_player_metrics"
"""
type AdjustedPlayerMetricsAggregate {
  aggregate: AdjustedPlayerMetricsAggregateFields
  nodes: [AdjustedPlayerMetrics!]!
}
"""
aggregate fields of "adjusted_player_metrics"
"""
type AdjustedPlayerMetricsAggregateFields {
  avg: AdjustedPlayerMetricsAvgFields
  count(columns: [AdjustedPlayerMetricsSelectColumn!], distinct: Boolean): Int!
  max: AdjustedPlayerMetricsMaxFields
  min: AdjustedPlayerMetricsMinFields
  stddev: AdjustedPlayerMetricsStddevFields
  stddevPop: AdjustedPlayerMetricsStddevPopFields
  stddevSamp: AdjustedPlayerMetricsStddevSampFields
  sum: AdjustedPlayerMetricsSumFields
  varPop: AdjustedPlayerMetricsVarPopFields
  varSamp: AdjustedPlayerMetricsVarSampFields
  variance: AdjustedPlayerMetricsVarianceFields
}
"aggregate avg on columns"
type AdjustedPlayerMetricsAvgFields {
  athleteId: Float
  metricValue: Float
  plays: Float
  year: Float
}
"aggregate max on columns"
type AdjustedPlayerMetricsMaxFields {
  athleteId: bigint
  metricType: player_adjusted_metric_type
  metricValue: numeric
  plays: smallint
  year: smallint
}
"aggregate min on columns"
type AdjustedPlayerMetricsMinFields {
  athleteId: bigint
  metricType: player_adjusted_metric_type
  metricValue: numeric
  plays: smallint
  year: smallint
}
"aggregate stddev on columns"
type AdjustedPlayerMetricsStddevFields {
  athleteId: Float
  metricValue: Float
  plays: Float
  year: Float
}
"aggregate stddevPop on columns"
type AdjustedPlayerMetricsStddevPopFields {
  athleteId: Float
  metricValue: Float
  plays: Float
  year: Float
}
"aggregate stddevSamp on columns"
type AdjustedPlayerMetricsStddevSampFields {
  athleteId: Float
  metricValue: Float
  plays: Float
  year: Float
}
"aggregate sum on columns"
type AdjustedPlayerMetricsSumFields {
  athleteId: bigint
  metricValue: numeric
  plays: smallint
  year: smallint
}
"aggregate varPop on columns"
type AdjustedPlayerMetricsVarPopFields {
  athleteId: Float
  metricValue: Float
  plays: Float
  year: Float
}
"aggregate varSamp on columns"
type AdjustedPlayerMetricsVarSampFields {
  athleteId: Float
  metricValue: Float
  plays: Float
  year: Float
}
"aggregate variance on columns"
type AdjustedPlayerMetricsVarianceFields {
  athleteId: Float
  metricValue: Float
  plays: Float
  year: Float
}
"""
columns and relationships of "adjusted_team_metrics"
"""
type AdjustedTeamMetrics {
  epa: numeric!
  epaAllowed: numeric!
  explosiveness: numeric!
  explosivenessAllowed: numeric!
  highlightYards: numeric!
  highlightYardsAllowed: numeric!
  lineYards: numeric!
  lineYardsAllowed: numeric!
  openFieldYards: numeric!
  openFieldYardsAllowed: numeric!
  passingDownsSuccess: numeric!
  passingDownsSuccessAllowed: numeric!
  passingEpa: numeric!
  passingEpaAllowed: numeric!
  rushingEpa: numeric!
  rushingEpaAllowed: numeric!
  secondLevelYards: numeric!
  secondLevelYardsAllowed: numeric!
  standardDownsSuccess: numeric!
  standardDownsSuccessAllowed: numeric!
  success: numeric!
  successAllowed: numeric!
  "An object relationship"
  team: currentTeams
  teamId: Int!
  year: smallint!
}
"""
aggregated selection of "adjusted_team_metrics"
"""
type AdjustedTeamMetricsAggregate {
  aggregate: AdjustedTeamMetricsAggregateFields
  nodes: [AdjustedTeamMetrics!]!
}
"""
aggregate fields of "adjusted_team_metrics"
"""
type AdjustedTeamMetricsAggregateFields {
  avg: AdjustedTeamMetricsAvgFields
  count(columns: [AdjustedTeamMetricsSelectColumn!], distinct: Boolean): Int!
  max: AdjustedTeamMetricsMaxFields
  min: AdjustedTeamMetricsMinFields
  stddev: AdjustedTeamMetricsStddevFields
  stddevPop: AdjustedTeamMetricsStddevPopFields
  stddevSamp: AdjustedTeamMetricsStddevSampFields
  sum: AdjustedTeamMetricsSumFields
  varPop: AdjustedTeamMetricsVarPopFields
  varSamp: AdjustedTeamMetricsVarSampFields
  variance: AdjustedTeamMetricsVarianceFields
}
"aggregate avg on columns"
type AdjustedTeamMetricsAvgFields {
  epa: Float
  epaAllowed: Float
  explosiveness: Float
  explosivenessAllowed: Float
  highlightYards: Float
  highlightYardsAllowed: Float
  lineYards: Float
  lineYardsAllowed: Float
  openFieldYards: Float
  openFieldYardsAllowed: Float
  passingDownsSuccess: Float
  passingDownsSuccessAllowed: Float
  passingEpa: Float
  passingEpaAllowed: Float
  rushingEpa: Float
  rushingEpaAllowed: Float
  secondLevelYards: Float
  secondLevelYardsAllowed: Float
  standardDownsSuccess: Float
  standardDownsSuccessAllowed: Float
  success: Float
  successAllowed: Float
  teamId: Float
  year: Float
}
"aggregate max on columns"
type AdjustedTeamMetricsMaxFields {
  epa: numeric
  epaAllowed: numeric
  explosiveness: numeric
  explosivenessAllowed: numeric
  highlightYards: numeric
  highlightYardsAllowed: numeric
  lineYards: numeric
  lineYardsAllowed: numeric
  openFieldYards: numeric
  openFieldYardsAllowed: numeric
  passingDownsSuccess: numeric
  passingDownsSuccessAllowed: numeric
  passingEpa: numeric
  passingEpaAllowed: numeric
  rushingEpa: numeric
  rushingEpaAllowed: numeric
  secondLevelYards: numeric
  secondLevelYardsAllowed: numeric
  standardDownsSuccess: numeric
  standardDownsSuccessAllowed: numeric
  success: numeric
  successAllowed: numeric
  teamId: Int
  year: smallint
}
"aggregate min on columns"
type AdjustedTeamMetricsMinFields {
  epa: numeric
  epaAllowed: numeric
  explosiveness: numeric
  explosivenessAllowed: numeric
  highlightYards: numeric
  highlightYardsAllowed: numeric
  lineYards: numeric
  lineYardsAllowed: numeric
  openFieldYards: numeric
  openFieldYardsAllowed: numeric
  passingDownsSuccess: numeric
  passingDownsSuccessAllowed: numeric
  passingEpa: numeric
  passingEpaAllowed: numeric
  rushingEpa: numeric
  rushingEpaAllowed: numeric
  secondLevelYards: numeric
  secondLevelYardsAllowed: numeric
  standardDownsSuccess: numeric
  standardDownsSuccessAllowed: numeric
  success: numeric
  successAllowed: numeric
  teamId: Int
  year: smallint
}
"aggregate stddev on columns"
type AdjustedTeamMetricsStddevFields {
  epa: Float
  epaAllowed: Float
  explosiveness: Float
  explosivenessAllowed: Float
  highlightYards: Float
  highlightYardsAllowed: Float
  lineYards: Float
  lineYardsAllowed: Float
  openFieldYards: Float
  openFieldYardsAllowed: Float
  passingDownsSuccess: Float
  passingDownsSuccessAllowed: Float
  passingEpa: Float
  passingEpaAllowed: Float
  rushingEpa: Float
  rushingEpaAllowed: Float
  secondLevelYards: Float
  secondLevelYardsAllowed: Float
  standardDownsSuccess: Float
  standardDownsSuccessAllowed: Float
  success: Float
  successAllowed: Float
  teamId: Float
  year: Float
}
"aggregate stddevPop on columns"
type AdjustedTeamMetricsStddevPopFields {
  epa: Float
  epaAllowed: Float
  explosiveness: Float
  explosivenessAllowed: Float
  highlightYards: Float
  highlightYardsAllowed: Float
  lineYards: Float
  lineYardsAllowed: Float
  openFieldYards: Float
  openFieldYardsAllowed: Float
  passingDownsSuccess: Float
  passingDownsSuccessAllowed: Float
  passingEpa: Float
  passingEpaAllowed: Float
  rushingEpa: Float
  rushingEpaAllowed: Float
  secondLevelYards: Float
  secondLevelYardsAllowed: Float
  standardDownsSuccess: Float
  standardDownsSuccessAllowed: Float
  success: Float
  successAllowed: Float
  teamId: Float
  year: Float
}
"aggregate stddevSamp on columns"
type AdjustedTeamMetricsStddevSampFields {
  epa: Float
  epaAllowed: Float
  explosiveness: Float
  explosivenessAllowed: Float
  highlightYards: Float
  highlightYardsAllowed: Float
  lineYards: Float
  lineYardsAllowed: Float
  openFieldYards: Float
  openFieldYardsAllowed: Float
  passingDownsSuccess: Float
  passingDownsSuccessAllowed: Float
  passingEpa: Float
  passingEpaAllowed: Float
  rushingEpa: Float
  rushingEpaAllowed: Float
  secondLevelYards: Float
  secondLevelYardsAllowed: Float
  standardDownsSuccess: Float
  standardDownsSuccessAllowed: Float
  success: Float
  successAllowed: Float
  teamId: Float
  year: Float
}
"aggregate sum on columns"
type AdjustedTeamMetricsSumFields {
  epa: numeric
  epaAllowed: numeric
  explosiveness: numeric
  explosivenessAllowed: numeric
  highlightYards: numeric
  highlightYardsAllowed: numeric
  lineYards: numeric
  lineYardsAllowed: numeric
  openFieldYards: numeric
  openFieldYardsAllowed: numeric
  passingDownsSuccess: numeric
  passingDownsSuccessAllowed: numeric
  passingEpa: numeric
  passingEpaAllowed: numeric
  rushingEpa: numeric
  rushingEpaAllowed: numeric
  secondLevelYards: numeric
  secondLevelYardsAllowed: numeric
  standardDownsSuccess: numeric
  standardDownsSuccessAllowed: numeric
  success: numeric
  successAllowed: numeric
  teamId: Int
  year: smallint
}
"aggregate varPop on columns"
type AdjustedTeamMetricsVarPopFields {
  epa: Float
  epaAllowed: Float
  explosiveness: Float
  explosivenessAllowed: Float
  highlightYards: Float
  highlightYardsAllowed: Float
  lineYards: Float
  lineYardsAllowed: Float
  openFieldYards: Float
  openFieldYardsAllowed: Float
  passingDownsSuccess: Float
  passingDownsSuccessAllowed: Float
  passingEpa: Float
  passingEpaAllowed: Float
  rushingEpa: Float
  rushingEpaAllowed: Float
  secondLevelYards: Float
  secondLevelYardsAllowed: Float
  standardDownsSuccess: Float
  standardDownsSuccessAllowed: Float
  success: Float
  successAllowed: Float
  teamId: Float
  year: Float
}
"aggregate varSamp on columns"
type AdjustedTeamMetricsVarSampFields {
  epa: Float
  epaAllowed: Float
  explosiveness: Float
  explosivenessAllowed: Float
  highlightYards: Float
  highlightYardsAllowed: Float
  lineYards: Float
  lineYardsAllowed: Float
  openFieldYards: Float
  openFieldYardsAllowed: Float
  passingDownsSuccess: Float
  passingDownsSuccessAllowed: Float
  passingEpa: Float
  passingEpaAllowed: Float
  rushingEpa: Float
  rushingEpaAllowed: Float
  secondLevelYards: Float
  secondLevelYardsAllowed: Float
  standardDownsSuccess: Float
  standardDownsSuccessAllowed: Float
  success: Float
  successAllowed: Float
  teamId: Float
  year: Float
}
"aggregate variance on columns"
type AdjustedTeamMetricsVarianceFields {
  epa: Float
  epaAllowed: Float
  explosiveness: Float
  explosivenessAllowed: Float
  highlightYards: Float
  highlightYardsAllowed: Float
  lineYards: Float
  lineYardsAllowed: Float
  openFieldYards: Float
  openFieldYardsAllowed: Float
  passingDownsSuccess: Float
  passingDownsSuccessAllowed: Float
  passingEpa: Float
  passingEpaAllowed: Float
  rushingEpa: Float
  rushingEpaAllowed: Float
  secondLevelYards: Float
  secondLevelYardsAllowed: Float
  standardDownsSuccess: Float
  standardDownsSuccessAllowed: Float
  success: Float
  successAllowed: Float
  teamId: Float
  year: Float
}
"""
columns and relationships of "athlete"
"""
type Athlete {
  "An array relationship"
  adjustedPlayerMetrics(
    "distinct select on columns"
    distinctOn: [AdjustedPlayerMetricsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AdjustedPlayerMetricsOrderBy!],
    "filter the rows returned"
    where: AdjustedPlayerMetricsBoolExp
  ): [AdjustedPlayerMetrics!]!
  "An aggregate relationship"
  adjustedPlayerMetricsAggregate(
    "distinct select on columns"
    distinctOn: [AdjustedPlayerMetricsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AdjustedPlayerMetricsOrderBy!],
    "filter the rows returned"
    where: AdjustedPlayerMetricsBoolExp
  ): AdjustedPlayerMetricsAggregate!
  "An array relationship"
  athleteTeams(
    "distinct select on columns"
    distinctOn: [AthleteTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AthleteTeamOrderBy!],
    "filter the rows returned"
    where: AthleteTeamBoolExp
  ): [AthleteTeam!]!
  "An aggregate relationship"
  athleteTeamsAggregate(
    "distinct select on columns"
    distinctOn: [AthleteTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AthleteTeamOrderBy!],
    "filter the rows returned"
    where: AthleteTeamBoolExp
  ): AthleteTeamAggregate!
  firstName: String
  height: smallint
  "An object relationship"
  hometown: Hometown
  hometownId: Int
  id: bigint!
  jersey: smallint
  lastName: String
  name: String!
  "An object relationship"
  position: Position
  positionId: smallint
  "An array relationship"
  recruits(
    "distinct select on columns"
    distinctOn: [RecruitSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitOrderBy!],
    "filter the rows returned"
    where: RecruitBoolExp
  ): [Recruit!]!
  "An aggregate relationship"
  recruitsAggregate(
    "distinct select on columns"
    distinctOn: [RecruitSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitOrderBy!],
    "filter the rows returned"
    where: RecruitBoolExp
  ): RecruitAggregate!
  teamId: Int
  weight: smallint
}
"""
aggregated selection of "athlete"
"""
type AthleteAggregate {
  aggregate: AthleteAggregateFields
  nodes: [Athlete!]!
}
"""
aggregate fields of "athlete"
"""
type AthleteAggregateFields {
  avg: AthleteAvgFields
  count(columns: [AthleteSelectColumn!], distinct: Boolean): Int!
  max: AthleteMaxFields
  min: AthleteMinFields
  stddev: AthleteStddevFields
  stddevPop: AthleteStddevPopFields
  stddevSamp: AthleteStddevSampFields
  sum: AthleteSumFields
  varPop: AthleteVarPopFields
  varSamp: AthleteVarSampFields
  variance: AthleteVarianceFields
}
"aggregate avg on columns"
type AthleteAvgFields {
  height: Float
  hometownId: Float
  id: Float
  jersey: Float
  positionId: Float
  teamId: Float
  weight: Float
}
"aggregate max on columns"
type AthleteMaxFields {
  firstName: String
  height: smallint
  hometownId: Int
  id: bigint
  jersey: smallint
  lastName: String
  name: String
  positionId: smallint
  teamId: Int
  weight: smallint
}
"aggregate min on columns"
type AthleteMinFields {
  firstName: String
  height: smallint
  hometownId: Int
  id: bigint
  jersey: smallint
  lastName: String
  name: String
  positionId: smallint
  teamId: Int
  weight: smallint
}
"aggregate stddev on columns"
type AthleteStddevFields {
  height: Float
  hometownId: Float
  id: Float
  jersey: Float
  positionId: Float
  teamId: Float
  weight: Float
}
"aggregate stddevPop on columns"
type AthleteStddevPopFields {
  height: Float
  hometownId: Float
  id: Float
  jersey: Float
  positionId: Float
  teamId: Float
  weight: Float
}
"aggregate stddevSamp on columns"
type AthleteStddevSampFields {
  height: Float
  hometownId: Float
  id: Float
  jersey: Float
  positionId: Float
  teamId: Float
  weight: Float
}
"aggregate sum on columns"
type AthleteSumFields {
  height: smallint
  hometownId: Int
  id: bigint
  jersey: smallint
  positionId: smallint
  teamId: Int
  weight: smallint
}
"""
columns and relationships of "athlete_team"
"""
type AthleteTeam {
  "An object relationship"
  athlete: Athlete
  athleteId: bigint!
  endYear: smallint
  startYear: smallint
  "An object relationship"
  team: historicalTeam
  teamId: Int!
}
"""
aggregated selection of "athlete_team"
"""
type AthleteTeamAggregate {
  aggregate: AthleteTeamAggregateFields
  nodes: [AthleteTeam!]!
}
"""
aggregate fields of "athlete_team"
"""
type AthleteTeamAggregateFields {
  avg: AthleteTeamAvgFields
  count(columns: [AthleteTeamSelectColumn!], distinct: Boolean): Int!
  max: AthleteTeamMaxFields
  min: AthleteTeamMinFields
  stddev: AthleteTeamStddevFields
  stddevPop: AthleteTeamStddevPopFields
  stddevSamp: AthleteTeamStddevSampFields
  sum: AthleteTeamSumFields
  varPop: AthleteTeamVarPopFields
  varSamp: AthleteTeamVarSampFields
  variance: AthleteTeamVarianceFields
}
"aggregate avg on columns"
type AthleteTeamAvgFields {
  athleteId: Float
  endYear: Float
  startYear: Float
  teamId: Float
}
"aggregate max on columns"
type AthleteTeamMaxFields {
  athleteId: bigint
  endYear: smallint
  startYear: smallint
  teamId: Int
}
"aggregate min on columns"
type AthleteTeamMinFields {
  athleteId: bigint
  endYear: smallint
  startYear: smallint
  teamId: Int
}
"aggregate stddev on columns"
type AthleteTeamStddevFields {
  athleteId: Float
  endYear: Float
  startYear: Float
  teamId: Float
}
"aggregate stddevPop on columns"
type AthleteTeamStddevPopFields {
  athleteId: Float
  endYear: Float
  startYear: Float
  teamId: Float
}
"aggregate stddevSamp on columns"
type AthleteTeamStddevSampFields {
  athleteId: Float
  endYear: Float
  startYear: Float
  teamId: Float
}
"aggregate sum on columns"
type AthleteTeamSumFields {
  athleteId: bigint
  endYear: smallint
  startYear: smallint
  teamId: Int
}
"aggregate varPop on columns"
type AthleteTeamVarPopFields {
  athleteId: Float
  endYear: Float
  startYear: Float
  teamId: Float
}
"aggregate varSamp on columns"
type AthleteTeamVarSampFields {
  athleteId: Float
  endYear: Float
  startYear: Float
  teamId: Float
}
"aggregate variance on columns"
type AthleteTeamVarianceFields {
  athleteId: Float
  endYear: Float
  startYear: Float
  teamId: Float
}
"aggregate varPop on columns"
type AthleteVarPopFields {
  height: Float
  hometownId: Float
  id: Float
  jersey: Float
  positionId: Float
  teamId: Float
  weight: Float
}
"aggregate varSamp on columns"
type AthleteVarSampFields {
  height: Float
  hometownId: Float
  id: Float
  jersey: Float
  positionId: Float
  teamId: Float
  weight: Float
}
"aggregate variance on columns"
type AthleteVarianceFields {
  height: Float
  hometownId: Float
  id: Float
  jersey: Float
  positionId: Float
  teamId: Float
  weight: Float
}
"""
columns and relationships of "calendar"
"""
type Calendar {
  endDate: timestamp!
  seasonType: season_type!
  startDate: timestamp!
  week: smallint!
  year: smallint!
}
"""
columns and relationships of "coach"
"""
type Coach {
  firstName: String!
  id: Int!
  lastName: String!
  "An array relationship"
  seasons(
    "distinct select on columns"
    distinctOn: [CoachSeasonSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [CoachSeasonOrderBy!],
    "filter the rows returned"
    where: CoachSeasonBoolExp
  ): [CoachSeason!]!
  "An aggregate relationship"
  seasonsAggregate(
    "distinct select on columns"
    distinctOn: [CoachSeasonSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [CoachSeasonOrderBy!],
    "filter the rows returned"
    where: CoachSeasonBoolExp
  ): CoachSeasonAggregate!
}
"""
aggregated selection of "coach"
"""
type CoachAggregate {
  aggregate: CoachAggregateFields
  nodes: [Coach!]!
}
"""
aggregate fields of "coach"
"""
type CoachAggregateFields {
  avg: CoachAvgFields
  count(columns: [CoachSelectColumn!], distinct: Boolean): Int!
  max: CoachMaxFields
  min: CoachMinFields
  stddev: CoachStddevFields
  stddevPop: CoachStddevPopFields
  stddevSamp: CoachStddevSampFields
  sum: CoachSumFields
  varPop: CoachVarPopFields
  varSamp: CoachVarSampFields
  variance: CoachVarianceFields
}
"aggregate avg on columns"
type CoachAvgFields {
  id: Float
}
"aggregate max on columns"
type CoachMaxFields {
  firstName: String
  id: Int
  lastName: String
}
"aggregate min on columns"
type CoachMinFields {
  firstName: String
  id: Int
  lastName: String
}
"""
columns and relationships of "coach_season"
"""
type CoachSeason {
  "An object relationship"
  coach: Coach!
  games: smallint!
  losses: smallint!
  postseasonRank: smallint
  preseasonRank: smallint
  "An object relationship"
  team: currentTeams
  ties: smallint!
  wins: smallint!
  year: smallint!
}
"""
aggregated selection of "coach_season"
"""
type CoachSeasonAggregate {
  aggregate: CoachSeasonAggregateFields
  nodes: [CoachSeason!]!
}
"""
aggregate fields of "coach_season"
"""
type CoachSeasonAggregateFields {
  avg: CoachSeasonAvgFields
  count(columns: [CoachSeasonSelectColumn!], distinct: Boolean): Int!
  max: CoachSeasonMaxFields
  min: CoachSeasonMinFields
  stddev: CoachSeasonStddevFields
  stddevPop: CoachSeasonStddevPopFields
  stddevSamp: CoachSeasonStddevSampFields
  sum: CoachSeasonSumFields
  varPop: CoachSeasonVarPopFields
  varSamp: CoachSeasonVarSampFields
  variance: CoachSeasonVarianceFields
}
"aggregate avg on columns"
type CoachSeasonAvgFields {
  games: Float
  losses: Float
  postseasonRank: Float
  preseasonRank: Float
  ties: Float
  wins: Float
  year: Float
}
"aggregate max on columns"
type CoachSeasonMaxFields {
  games: smallint
  losses: smallint
  postseasonRank: smallint
  preseasonRank: smallint
  ties: smallint
  wins: smallint
  year: smallint
}
"aggregate min on columns"
type CoachSeasonMinFields {
  games: smallint
  losses: smallint
  postseasonRank: smallint
  preseasonRank: smallint
  ties: smallint
  wins: smallint
  year: smallint
}
"aggregate stddev on columns"
type CoachSeasonStddevFields {
  games: Float
  losses: Float
  postseasonRank: Float
  preseasonRank: Float
  ties: Float
  wins: Float
  year: Float
}
"aggregate stddevPop on columns"
type CoachSeasonStddevPopFields {
  games: Float
  losses: Float
  postseasonRank: Float
  preseasonRank: Float
  ties: Float
  wins: Float
  year: Float
}
"aggregate stddevSamp on columns"
type CoachSeasonStddevSampFields {
  games: Float
  losses: Float
  postseasonRank: Float
  preseasonRank: Float
  ties: Float
  wins: Float
  year: Float
}
"aggregate sum on columns"
type CoachSeasonSumFields {
  games: smallint
  losses: smallint
  postseasonRank: smallint
  preseasonRank: smallint
  ties: smallint
  wins: smallint
  year: smallint
}
"aggregate varPop on columns"
type CoachSeasonVarPopFields {
  games: Float
  losses: Float
  postseasonRank: Float
  preseasonRank: Float
  ties: Float
  wins: Float
  year: Float
}
"aggregate varSamp on columns"
type CoachSeasonVarSampFields {
  games: Float
  losses: Float
  postseasonRank: Float
  preseasonRank: Float
  ties: Float
  wins: Float
  year: Float
}
"aggregate variance on columns"
type CoachSeasonVarianceFields {
  games: Float
  losses: Float
  postseasonRank: Float
  preseasonRank: Float
  ties: Float
  wins: Float
  year: Float
}
"aggregate stddev on columns"
type CoachStddevFields {
  id: Float
}
"aggregate stddevPop on columns"
type CoachStddevPopFields {
  id: Float
}
"aggregate stddevSamp on columns"
type CoachStddevSampFields {
  id: Float
}
"aggregate sum on columns"
type CoachSumFields {
  id: Int
}
"aggregate varPop on columns"
type CoachVarPopFields {
  id: Float
}
"aggregate varSamp on columns"
type CoachVarSampFields {
  id: Float
}
"aggregate variance on columns"
type CoachVarianceFields {
  id: Float
}
"""
columns and relationships of "conference"
"""
type Conference {
  abbreviation: String
  division: division
  id: smallint!
  name: String!
  shortName: String
  srName: String
}
"""
columns and relationships of "draft_picks"
"""
type DraftPicks {
  "An object relationship"
  collegeAthleteRecord: Athlete
  collegeId: Int
  "An object relationship"
  collegeTeam: historicalTeam
  collegeTeamId: Int!
  "An object relationship"
  draftTeam: DraftTeam!
  grade: smallint
  height: smallint
  name: String!
  nflTeamId: smallint!
  overall: smallint!
  overallRank: smallint
  pick: smallint!
  "An object relationship"
  position: DraftPosition!
  positionId: smallint!
  positionRank: smallint
  round: smallint!
  weight: smallint
  year: smallint!
}
"""
aggregated selection of "draft_picks"
"""
type DraftPicksAggregate {
  aggregate: DraftPicksAggregateFields
  nodes: [DraftPicks!]!
}
"""
aggregate fields of "draft_picks"
"""
type DraftPicksAggregateFields {
  avg: DraftPicksAvgFields
  count(columns: [DraftPicksSelectColumn!], distinct: Boolean): Int!
  max: DraftPicksMaxFields
  min: DraftPicksMinFields
  stddev: DraftPicksStddevFields
  stddevPop: DraftPicksStddevPopFields
  stddevSamp: DraftPicksStddevSampFields
  sum: DraftPicksSumFields
  varPop: DraftPicksVarPopFields
  varSamp: DraftPicksVarSampFields
  variance: DraftPicksVarianceFields
}
"aggregate avg on columns"
type DraftPicksAvgFields {
  collegeId: Float
  collegeTeamId: Float
  grade: Float
  height: Float
  nflTeamId: Float
  overall: Float
  overallRank: Float
  pick: Float
  positionId: Float
  positionRank: Float
  round: Float
  weight: Float
  year: Float
}
"aggregate max on columns"
type DraftPicksMaxFields {
  collegeId: Int
  collegeTeamId: Int
  grade: smallint
  height: smallint
  name: String
  nflTeamId: smallint
  overall: smallint
  overallRank: smallint
  pick: smallint
  positionId: smallint
  positionRank: smallint
  round: smallint
  weight: smallint
  year: smallint
}
"aggregate min on columns"
type DraftPicksMinFields {
  collegeId: Int
  collegeTeamId: Int
  grade: smallint
  height: smallint
  name: String
  nflTeamId: smallint
  overall: smallint
  overallRank: smallint
  pick: smallint
  positionId: smallint
  positionRank: smallint
  round: smallint
  weight: smallint
  year: smallint
}
"aggregate stddev on columns"
type DraftPicksStddevFields {
  collegeId: Float
  collegeTeamId: Float
  grade: Float
  height: Float
  nflTeamId: Float
  overall: Float
  overallRank: Float
  pick: Float
  positionId: Float
  positionRank: Float
  round: Float
  weight: Float
  year: Float
}
"aggregate stddevPop on columns"
type DraftPicksStddevPopFields {
  collegeId: Float
  collegeTeamId: Float
  grade: Float
  height: Float
  nflTeamId: Float
  overall: Float
  overallRank: Float
  pick: Float
  positionId: Float
  positionRank: Float
  round: Float
  weight: Float
  year: Float
}
"aggregate stddevSamp on columns"
type DraftPicksStddevSampFields {
  collegeId: Float
  collegeTeamId: Float
  grade: Float
  height: Float
  nflTeamId: Float
  overall: Float
  overallRank: Float
  pick: Float
  positionId: Float
  positionRank: Float
  round: Float
  weight: Float
  year: Float
}
"aggregate sum on columns"
type DraftPicksSumFields {
  collegeId: Int
  collegeTeamId: Int
  grade: smallint
  height: smallint
  nflTeamId: smallint
  overall: smallint
  overallRank: smallint
  pick: smallint
  positionId: smallint
  positionRank: smallint
  round: smallint
  weight: smallint
  year: smallint
}
"aggregate varPop on columns"
type DraftPicksVarPopFields {
  collegeId: Float
  collegeTeamId: Float
  grade: Float
  height: Float
  nflTeamId: Float
  overall: Float
  overallRank: Float
  pick: Float
  positionId: Float
  positionRank: Float
  round: Float
  weight: Float
  year: Float
}
"aggregate varSamp on columns"
type DraftPicksVarSampFields {
  collegeId: Float
  collegeTeamId: Float
  grade: Float
  height: Float
  nflTeamId: Float
  overall: Float
  overallRank: Float
  pick: Float
  positionId: Float
  positionRank: Float
  round: Float
  weight: Float
  year: Float
}
"aggregate variance on columns"
type DraftPicksVarianceFields {
  collegeId: Float
  collegeTeamId: Float
  grade: Float
  height: Float
  nflTeamId: Float
  overall: Float
  overallRank: Float
  pick: Float
  positionId: Float
  positionRank: Float
  round: Float
  weight: Float
  year: Float
}
"""
columns and relationships of "draft_position"
"""
type DraftPosition {
  abbreviation: String!
  id: smallint!
  name: String!
}
"""
columns and relationships of "draft_team"
"""
type DraftTeam {
  displayName: String
  id: smallint!
  location: String!
  logo: String
  mascot: String
  nickname: String
  "An array relationship"
  picks(
    "distinct select on columns"
    distinctOn: [DraftPicksSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [DraftPicksOrderBy!],
    "filter the rows returned"
    where: DraftPicksBoolExp
  ): [DraftPicks!]!
  "An aggregate relationship"
  picksAggregate(
    "distinct select on columns"
    distinctOn: [DraftPicksSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [DraftPicksOrderBy!],
    "filter the rows returned"
    where: DraftPicksBoolExp
  ): DraftPicksAggregate!
  shortDisplayName: String
}
"""
columns and relationships of "game_lines"
"""
type GameLines {
  gameId: Int!
  linesProviderId: Int!
  moneylineAway: Int
  moneylineHome: Int
  overUnder: numeric
  overUnderOpen: numeric
  "An object relationship"
  provider: LinesProvider
  spread: numeric
  spreadOpen: numeric
}
"""
aggregated selection of "game_lines"
"""
type GameLinesAggregate {
  aggregate: GameLinesAggregateFields
  nodes: [GameLines!]!
}
"""
aggregate fields of "game_lines"
"""
type GameLinesAggregateFields {
  avg: GameLinesAvgFields
  count(columns: [GameLinesSelectColumn!], distinct: Boolean): Int!
  max: GameLinesMaxFields
  min: GameLinesMinFields
  stddev: GameLinesStddevFields
  stddevPop: GameLinesStddevPopFields
  stddevSamp: GameLinesStddevSampFields
  sum: GameLinesSumFields
  varPop: GameLinesVarPopFields
  varSamp: GameLinesVarSampFields
  variance: GameLinesVarianceFields
}
"aggregate avg on columns"
type GameLinesAvgFields {
  gameId: Float
  linesProviderId: Float
  moneylineAway: Float
  moneylineHome: Float
  overUnder: Float
  overUnderOpen: Float
  spread: Float
  spreadOpen: Float
}
"aggregate max on columns"
type GameLinesMaxFields {
  gameId: Int
  linesProviderId: Int
  moneylineAway: Int
  moneylineHome: Int
  overUnder: numeric
  overUnderOpen: numeric
  spread: numeric
  spreadOpen: numeric
}
"aggregate min on columns"
type GameLinesMinFields {
  gameId: Int
  linesProviderId: Int
  moneylineAway: Int
  moneylineHome: Int
  overUnder: numeric
  overUnderOpen: numeric
  spread: numeric
  spreadOpen: numeric
}
"aggregate stddev on columns"
type GameLinesStddevFields {
  gameId: Float
  linesProviderId: Float
  moneylineAway: Float
  moneylineHome: Float
  overUnder: Float
  overUnderOpen: Float
  spread: Float
  spreadOpen: Float
}
"aggregate stddevPop on columns"
type GameLinesStddevPopFields {
  gameId: Float
  linesProviderId: Float
  moneylineAway: Float
  moneylineHome: Float
  overUnder: Float
  overUnderOpen: Float
  spread: Float
  spreadOpen: Float
}
"aggregate stddevSamp on columns"
type GameLinesStddevSampFields {
  gameId: Float
  linesProviderId: Float
  moneylineAway: Float
  moneylineHome: Float
  overUnder: Float
  overUnderOpen: Float
  spread: Float
  spreadOpen: Float
}
"aggregate sum on columns"
type GameLinesSumFields {
  gameId: Int
  linesProviderId: Int
  moneylineAway: Int
  moneylineHome: Int
  overUnder: numeric
  overUnderOpen: numeric
  spread: numeric
  spreadOpen: numeric
}
"aggregate varPop on columns"
type GameLinesVarPopFields {
  gameId: Float
  linesProviderId: Float
  moneylineAway: Float
  moneylineHome: Float
  overUnder: Float
  overUnderOpen: Float
  spread: Float
  spreadOpen: Float
}
"aggregate varSamp on columns"
type GameLinesVarSampFields {
  gameId: Float
  linesProviderId: Float
  moneylineAway: Float
  moneylineHome: Float
  overUnder: Float
  overUnderOpen: Float
  spread: Float
  spreadOpen: Float
}
"aggregate variance on columns"
type GameLinesVarianceFields {
  gameId: Float
  linesProviderId: Float
  moneylineAway: Float
  moneylineHome: Float
  overUnder: Float
  overUnderOpen: Float
  spread: Float
  spreadOpen: Float
}
"""
columns and relationships of "game_media"
"""
type GameMedia {
  mediaType: media_type!
  name: String!
}
"""
columns and relationships of "game_player_stat"
"""
type GamePlayerStat {
  "An object relationship"
  athlete: Athlete!
  athleteId: bigint!
  "An object relationship"
  gameTeam: GameTeam!
  gameTeamId: bigint!
  id: bigint!
  "An object relationship"
  playerStatCategory: PlayerStatCategory!
  "An object relationship"
  playerStatType: PlayerStatType!
  stat: String!
}
"""
aggregated selection of "game_player_stat"
"""
type GamePlayerStatAggregate {
  aggregate: GamePlayerStatAggregateFields
  nodes: [GamePlayerStat!]!
}
"""
aggregate fields of "game_player_stat"
"""
type GamePlayerStatAggregateFields {
  avg: GamePlayerStatAvgFields
  count(columns: [GamePlayerStatSelectColumn!], distinct: Boolean): Int!
  max: GamePlayerStatMaxFields
  min: GamePlayerStatMinFields
  stddev: GamePlayerStatStddevFields
  stddevPop: GamePlayerStatStddevPopFields
  stddevSamp: GamePlayerStatStddevSampFields
  sum: GamePlayerStatSumFields
  varPop: GamePlayerStatVarPopFields
  varSamp: GamePlayerStatVarSampFields
  variance: GamePlayerStatVarianceFields
}
"aggregate avg on columns"
type GamePlayerStatAvgFields {
  athleteId: Float
  gameTeamId: Float
  id: Float
}
"aggregate max on columns"
type GamePlayerStatMaxFields {
  athleteId: bigint
  gameTeamId: bigint
  id: bigint
  stat: String
}
"aggregate min on columns"
type GamePlayerStatMinFields {
  athleteId: bigint
  gameTeamId: bigint
  id: bigint
  stat: String
}
"aggregate stddev on columns"
type GamePlayerStatStddevFields {
  athleteId: Float
  gameTeamId: Float
  id: Float
}
"aggregate stddevPop on columns"
type GamePlayerStatStddevPopFields {
  athleteId: Float
  gameTeamId: Float
  id: Float
}
"aggregate stddevSamp on columns"
type GamePlayerStatStddevSampFields {
  athleteId: Float
  gameTeamId: Float
  id: Float
}
"aggregate sum on columns"
type GamePlayerStatSumFields {
  athleteId: bigint
  gameTeamId: bigint
  id: bigint
}
"aggregate varPop on columns"
type GamePlayerStatVarPopFields {
  athleteId: Float
  gameTeamId: Float
  id: Float
}
"aggregate varSamp on columns"
type GamePlayerStatVarSampFields {
  athleteId: Float
  gameTeamId: Float
  id: Float
}
"aggregate variance on columns"
type GamePlayerStatVarianceFields {
  athleteId: Float
  gameTeamId: Float
  id: Float
}
"""
columns and relationships of "game_team"
"""
type GameTeam {
  endElo: Int
  "An object relationship"
  game: game
  gameId: Int!
  "An array relationship"
  gamePlayerStats(
    "distinct select on columns"
    distinctOn: [GamePlayerStatSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GamePlayerStatOrderBy!],
    "filter the rows returned"
    where: GamePlayerStatBoolExp
  ): [GamePlayerStat!]!
  "An aggregate relationship"
  gamePlayerStatsAggregate(
    "distinct select on columns"
    distinctOn: [GamePlayerStatSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GamePlayerStatOrderBy!],
    "filter the rows returned"
    where: GamePlayerStatBoolExp
  ): GamePlayerStatAggregate!
  homeAway: home_away!
  lineScores: [smallint!]
  points: smallint
  startElo: Int
  teamId: Int!
  winProb: numeric
}
"""
columns and relationships of "game_weather"
"""
type GameWeather {
  "An object relationship"
  condition: WeatherCondition
  dewpoint: numeric
  gameId: Int!
  humidity: numeric
  precipitation: numeric
  pressure: numeric
  snowfall: numeric
  temperature: numeric
  weatherConditionCode: smallint
  windDirection: numeric
  windGust: numeric
  windSpeed: numeric
}
"""
columns and relationships of "hometown"
"""
type Hometown {
  "An array relationship"
  athletes(
    "distinct select on columns"
    distinctOn: [AthleteSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AthleteOrderBy!],
    "filter the rows returned"
    where: AthleteBoolExp
  ): [Athlete!]!
  "An aggregate relationship"
  athletesAggregate(
    "distinct select on columns"
    distinctOn: [AthleteSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AthleteOrderBy!],
    "filter the rows returned"
    where: AthleteBoolExp
  ): AthleteAggregate!
  city: String
  country: String
  countyFips: String
  latitude: numeric
  longitude: numeric
  "An array relationship"
  recruits(
    "distinct select on columns"
    distinctOn: [RecruitSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitOrderBy!],
    "filter the rows returned"
    where: RecruitBoolExp
  ): [Recruit!]!
  "An aggregate relationship"
  recruitsAggregate(
    "distinct select on columns"
    distinctOn: [RecruitSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitOrderBy!],
    "filter the rows returned"
    where: RecruitBoolExp
  ): RecruitAggregate!
  state: String
}
"""
aggregated selection of "hometown"
"""
type HometownAggregate {
  aggregate: HometownAggregateFields
  nodes: [Hometown!]!
}
"""
aggregate fields of "hometown"
"""
type HometownAggregateFields {
  avg: HometownAvgFields
  count(columns: [HometownSelectColumn!], distinct: Boolean): Int!
  max: HometownMaxFields
  min: HometownMinFields
  stddev: HometownStddevFields
  stddevPop: HometownStddevPopFields
  stddevSamp: HometownStddevSampFields
  sum: HometownSumFields
  varPop: HometownVarPopFields
  varSamp: HometownVarSampFields
  variance: HometownVarianceFields
}
"aggregate avg on columns"
type HometownAvgFields {
  latitude: Float
  longitude: Float
}
"aggregate max on columns"
type HometownMaxFields {
  city: String
  country: String
  countyFips: String
  latitude: numeric
  longitude: numeric
  state: String
}
"aggregate min on columns"
type HometownMinFields {
  city: String
  country: String
  countyFips: String
  latitude: numeric
  longitude: numeric
  state: String
}
"aggregate stddev on columns"
type HometownStddevFields {
  latitude: Float
  longitude: Float
}
"aggregate stddevPop on columns"
type HometownStddevPopFields {
  latitude: Float
  longitude: Float
}
"aggregate stddevSamp on columns"
type HometownStddevSampFields {
  latitude: Float
  longitude: Float
}
"aggregate sum on columns"
type HometownSumFields {
  latitude: numeric
  longitude: numeric
}
"aggregate varPop on columns"
type HometownVarPopFields {
  latitude: Float
  longitude: Float
}
"aggregate varSamp on columns"
type HometownVarSampFields {
  latitude: Float
  longitude: Float
}
"aggregate variance on columns"
type HometownVarianceFields {
  latitude: Float
  longitude: Float
}
"""
columns and relationships of "lines_provider"
"""
type LinesProvider {
  id: Int!
  name: String!
}
"""
aggregated selection of "lines_provider"
"""
type LinesProviderAggregate {
  aggregate: LinesProviderAggregateFields
  nodes: [LinesProvider!]!
}
"""
aggregate fields of "lines_provider"
"""
type LinesProviderAggregateFields {
  avg: LinesProviderAvgFields
  count(columns: [LinesProviderSelectColumn!], distinct: Boolean): Int!
  max: LinesProviderMaxFields
  min: LinesProviderMinFields
  stddev: LinesProviderStddevFields
  stddevPop: LinesProviderStddevPopFields
  stddevSamp: LinesProviderStddevSampFields
  sum: LinesProviderSumFields
  varPop: LinesProviderVarPopFields
  varSamp: LinesProviderVarSampFields
  variance: LinesProviderVarianceFields
}
"aggregate avg on columns"
type LinesProviderAvgFields {
  id: Float
}
"aggregate max on columns"
type LinesProviderMaxFields {
  id: Int
  name: String
}
"aggregate min on columns"
type LinesProviderMinFields {
  id: Int
  name: String
}
"aggregate stddev on columns"
type LinesProviderStddevFields {
  id: Float
}
"aggregate stddevPop on columns"
type LinesProviderStddevPopFields {
  id: Float
}
"aggregate stddevSamp on columns"
type LinesProviderStddevSampFields {
  id: Float
}
"aggregate sum on columns"
type LinesProviderSumFields {
  id: Int
}
"aggregate varPop on columns"
type LinesProviderVarPopFields {
  id: Float
}
"aggregate varSamp on columns"
type LinesProviderVarSampFields {
  id: Float
}
"aggregate variance on columns"
type LinesProviderVarianceFields {
  id: Float
}
"""
columns and relationships of "player_stat_category"
"""
type PlayerStatCategory {
  "An array relationship"
  gamePlayerStats(
    "distinct select on columns"
    distinctOn: [GamePlayerStatSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GamePlayerStatOrderBy!],
    "filter the rows returned"
    where: GamePlayerStatBoolExp
  ): [GamePlayerStat!]!
  "An aggregate relationship"
  gamePlayerStatsAggregate(
    "distinct select on columns"
    distinctOn: [GamePlayerStatSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GamePlayerStatOrderBy!],
    "filter the rows returned"
    where: GamePlayerStatBoolExp
  ): GamePlayerStatAggregate!
  name: String!
}
"""
aggregated selection of "player_stat_category"
"""
type PlayerStatCategoryAggregate {
  aggregate: PlayerStatCategoryAggregateFields
  nodes: [PlayerStatCategory!]!
}
"""
aggregate fields of "player_stat_category"
"""
type PlayerStatCategoryAggregateFields {
  count(columns: [PlayerStatCategorySelectColumn!], distinct: Boolean): Int!
  max: PlayerStatCategoryMaxFields
  min: PlayerStatCategoryMinFields
}
"aggregate max on columns"
type PlayerStatCategoryMaxFields {
  name: String
}
"aggregate min on columns"
type PlayerStatCategoryMinFields {
  name: String
}
"""
columns and relationships of "player_stat_type"
"""
type PlayerStatType {
  name: String!
}
"""
aggregated selection of "player_stat_type"
"""
type PlayerStatTypeAggregate {
  aggregate: PlayerStatTypeAggregateFields
  nodes: [PlayerStatType!]!
}
"""
aggregate fields of "player_stat_type"
"""
type PlayerStatTypeAggregateFields {
  count(columns: [PlayerStatTypeSelectColumn!], distinct: Boolean): Int!
  max: PlayerStatTypeMaxFields
  min: PlayerStatTypeMinFields
}
"aggregate max on columns"
type PlayerStatTypeMaxFields {
  name: String
}
"aggregate min on columns"
type PlayerStatTypeMinFields {
  name: String
}
"""
columns and relationships of "poll"
"""
type Poll {
  "An object relationship"
  pollType: PollType!
  "An array relationship"
  rankings(
    "distinct select on columns"
    distinctOn: [PollRankSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PollRankOrderBy!],
    "filter the rows returned"
    where: PollRankBoolExp
  ): [PollRank!]!
  season: Int!
  seasonType: season_type!
  week: smallint!
}
"""
columns and relationships of "poll_rank"
"""
type PollRank {
  firstPlaceVotes: smallint
  points: Int
  "An object relationship"
  poll: Poll!
  rank: smallint
  "An object relationship"
  team: currentTeams
}
"""
columns and relationships of "poll_type"
"""
type PollType {
  abbreviation: String
  id: Int!
  name: String!
  "An array relationship"
  polls(
    "distinct select on columns"
    distinctOn: [PollSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PollOrderBy!],
    "filter the rows returned"
    where: PollBoolExp
  ): [Poll!]!
  shortName: String!
}
"""
columns and relationships of "position"
"""
type Position {
  abbreviation: String!
  "An array relationship"
  athletes(
    "distinct select on columns"
    distinctOn: [AthleteSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AthleteOrderBy!],
    "filter the rows returned"
    where: AthleteBoolExp
  ): [Athlete!]!
  "An aggregate relationship"
  athletesAggregate(
    "distinct select on columns"
    distinctOn: [AthleteSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AthleteOrderBy!],
    "filter the rows returned"
    where: AthleteBoolExp
  ): AthleteAggregate!
  displayName: String!
  id: smallint!
  name: String!
}
"""
columns and relationships of "recruit"
"""
type Recruit {
  "An object relationship"
  athlete: Athlete
  "An object relationship"
  college: currentTeams
  height: Float
  "An object relationship"
  hometown: Hometown
  id: bigint!
  name: String!
  overallRank: smallint
  "An object relationship"
  position: RecruitPosition
  positionRank: smallint
  ranking: smallint
  rating: Float!
  "An object relationship"
  recruitSchool: RecruitSchool
  recruitType: recruit_type!
  stars: smallint!
  weight: smallint
  year: smallint!
}
"""
aggregated selection of "recruit"
"""
type RecruitAggregate {
  aggregate: RecruitAggregateFields
  nodes: [Recruit!]!
}
"""
aggregate fields of "recruit"
"""
type RecruitAggregateFields {
  avg: RecruitAvgFields
  count(columns: [RecruitSelectColumn!], distinct: Boolean): Int!
  max: RecruitMaxFields
  min: RecruitMinFields
  stddev: RecruitStddevFields
  stddevPop: RecruitStddevPopFields
  stddevSamp: RecruitStddevSampFields
  sum: RecruitSumFields
  varPop: RecruitVarPopFields
  varSamp: RecruitVarSampFields
  variance: RecruitVarianceFields
}
"aggregate avg on columns"
type RecruitAvgFields {
  height: Float
  id: Float
  overallRank: Float
  positionRank: Float
  ranking: Float
  rating: Float
  stars: Float
  weight: Float
  year: Float
}
"aggregate max on columns"
type RecruitMaxFields {
  height: Float
  id: bigint
  name: String
  overallRank: smallint
  positionRank: smallint
  ranking: smallint
  rating: Float
  recruitType: recruit_type
  stars: smallint
  weight: smallint
  year: smallint
}
"aggregate min on columns"
type RecruitMinFields {
  height: Float
  id: bigint
  name: String
  overallRank: smallint
  positionRank: smallint
  ranking: smallint
  rating: Float
  recruitType: recruit_type
  stars: smallint
  weight: smallint
  year: smallint
}
"""
columns and relationships of "recruit_position"
"""
type RecruitPosition {
  id: smallint!
  position: String!
  positionGroup: String
}
"""
aggregated selection of "recruit_position"
"""
type RecruitPositionAggregate {
  aggregate: RecruitPositionAggregateFields
  nodes: [RecruitPosition!]!
}
"""
aggregate fields of "recruit_position"
"""
type RecruitPositionAggregateFields {
  avg: RecruitPositionAvgFields
  count(columns: [RecruitPositionSelectColumn!], distinct: Boolean): Int!
  max: RecruitPositionMaxFields
  min: RecruitPositionMinFields
  stddev: RecruitPositionStddevFields
  stddevPop: RecruitPositionStddevPopFields
  stddevSamp: RecruitPositionStddevSampFields
  sum: RecruitPositionSumFields
  varPop: RecruitPositionVarPopFields
  varSamp: RecruitPositionVarSampFields
  variance: RecruitPositionVarianceFields
}
"aggregate avg on columns"
type RecruitPositionAvgFields {
  id: Float
}
"aggregate max on columns"
type RecruitPositionMaxFields {
  id: smallint
  position: String
  positionGroup: String
}
"aggregate min on columns"
type RecruitPositionMinFields {
  id: smallint
  position: String
  positionGroup: String
}
"aggregate stddev on columns"
type RecruitPositionStddevFields {
  id: Float
}
"aggregate stddevPop on columns"
type RecruitPositionStddevPopFields {
  id: Float
}
"aggregate stddevSamp on columns"
type RecruitPositionStddevSampFields {
  id: Float
}
"aggregate sum on columns"
type RecruitPositionSumFields {
  id: smallint
}
"aggregate varPop on columns"
type RecruitPositionVarPopFields {
  id: Float
}
"aggregate varSamp on columns"
type RecruitPositionVarSampFields {
  id: Float
}
"aggregate variance on columns"
type RecruitPositionVarianceFields {
  id: Float
}
"""
columns and relationships of "recruit_school"
"""
type RecruitSchool {
  id: Int!
  name: String!
  "An array relationship"
  recruits(
    "distinct select on columns"
    distinctOn: [RecruitSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitOrderBy!],
    "filter the rows returned"
    where: RecruitBoolExp
  ): [Recruit!]!
  "An aggregate relationship"
  recruitsAggregate(
    "distinct select on columns"
    distinctOn: [RecruitSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitOrderBy!],
    "filter the rows returned"
    where: RecruitBoolExp
  ): RecruitAggregate!
}
"""
aggregated selection of "recruit_school"
"""
type RecruitSchoolAggregate {
  aggregate: RecruitSchoolAggregateFields
  nodes: [RecruitSchool!]!
}
"""
aggregate fields of "recruit_school"
"""
type RecruitSchoolAggregateFields {
  avg: RecruitSchoolAvgFields
  count(columns: [RecruitSchoolSelectColumn!], distinct: Boolean): Int!
  max: RecruitSchoolMaxFields
  min: RecruitSchoolMinFields
  stddev: RecruitSchoolStddevFields
  stddevPop: RecruitSchoolStddevPopFields
  stddevSamp: RecruitSchoolStddevSampFields
  sum: RecruitSchoolSumFields
  varPop: RecruitSchoolVarPopFields
  varSamp: RecruitSchoolVarSampFields
  variance: RecruitSchoolVarianceFields
}
"aggregate avg on columns"
type RecruitSchoolAvgFields {
  id: Float
}
"aggregate max on columns"
type RecruitSchoolMaxFields {
  id: Int
  name: String
}
"aggregate min on columns"
type RecruitSchoolMinFields {
  id: Int
  name: String
}
"aggregate stddev on columns"
type RecruitSchoolStddevFields {
  id: Float
}
"aggregate stddevPop on columns"
type RecruitSchoolStddevPopFields {
  id: Float
}
"aggregate stddevSamp on columns"
type RecruitSchoolStddevSampFields {
  id: Float
}
"aggregate sum on columns"
type RecruitSchoolSumFields {
  id: Int
}
"aggregate varPop on columns"
type RecruitSchoolVarPopFields {
  id: Float
}
"aggregate varSamp on columns"
type RecruitSchoolVarSampFields {
  id: Float
}
"aggregate variance on columns"
type RecruitSchoolVarianceFields {
  id: Float
}
"aggregate stddev on columns"
type RecruitStddevFields {
  height: Float
  id: Float
  overallRank: Float
  positionRank: Float
  ranking: Float
  rating: Float
  stars: Float
  weight: Float
  year: Float
}
"aggregate stddevPop on columns"
type RecruitStddevPopFields {
  height: Float
  id: Float
  overallRank: Float
  positionRank: Float
  ranking: Float
  rating: Float
  stars: Float
  weight: Float
  year: Float
}
"aggregate stddevSamp on columns"
type RecruitStddevSampFields {
  height: Float
  id: Float
  overallRank: Float
  positionRank: Float
  ranking: Float
  rating: Float
  stars: Float
  weight: Float
  year: Float
}
"aggregate sum on columns"
type RecruitSumFields {
  height: Float
  id: bigint
  overallRank: smallint
  positionRank: smallint
  ranking: smallint
  rating: Float
  stars: smallint
  weight: smallint
  year: smallint
}
"aggregate varPop on columns"
type RecruitVarPopFields {
  height: Float
  id: Float
  overallRank: Float
  positionRank: Float
  ranking: Float
  rating: Float
  stars: Float
  weight: Float
  year: Float
}
"aggregate varSamp on columns"
type RecruitVarSampFields {
  height: Float
  id: Float
  overallRank: Float
  positionRank: Float
  ranking: Float
  rating: Float
  stars: Float
  weight: Float
  year: Float
}
"aggregate variance on columns"
type RecruitVarianceFields {
  height: Float
  id: Float
  overallRank: Float
  positionRank: Float
  ranking: Float
  rating: Float
  stars: Float
  weight: Float
  year: Float
}
"""
columns and relationships of "recruiting_team"
"""
type RecruitingTeam {
  id: Int!
  points: numeric!
  rank: smallint!
  "An object relationship"
  team: currentTeams
  year: smallint!
}
"""
aggregated selection of "recruiting_team"
"""
type RecruitingTeamAggregate {
  aggregate: RecruitingTeamAggregateFields
  nodes: [RecruitingTeam!]!
}
"""
aggregate fields of "recruiting_team"
"""
type RecruitingTeamAggregateFields {
  avg: RecruitingTeamAvgFields
  count(columns: [RecruitingTeamSelectColumn!], distinct: Boolean): Int!
  max: RecruitingTeamMaxFields
  min: RecruitingTeamMinFields
  stddev: RecruitingTeamStddevFields
  stddevPop: RecruitingTeamStddevPopFields
  stddevSamp: RecruitingTeamStddevSampFields
  sum: RecruitingTeamSumFields
  varPop: RecruitingTeamVarPopFields
  varSamp: RecruitingTeamVarSampFields
  variance: RecruitingTeamVarianceFields
}
"aggregate avg on columns"
type RecruitingTeamAvgFields {
  id: Float
  points: Float
  rank: Float
  year: Float
}
"aggregate max on columns"
type RecruitingTeamMaxFields {
  id: Int
  points: numeric
  rank: smallint
  year: smallint
}
"aggregate min on columns"
type RecruitingTeamMinFields {
  id: Int
  points: numeric
  rank: smallint
  year: smallint
}
"aggregate stddev on columns"
type RecruitingTeamStddevFields {
  id: Float
  points: Float
  rank: Float
  year: Float
}
"aggregate stddevPop on columns"
type RecruitingTeamStddevPopFields {
  id: Float
  points: Float
  rank: Float
  year: Float
}
"aggregate stddevSamp on columns"
type RecruitingTeamStddevSampFields {
  id: Float
  points: Float
  rank: Float
  year: Float
}
"aggregate sum on columns"
type RecruitingTeamSumFields {
  id: Int
  points: numeric
  rank: smallint
  year: smallint
}
"aggregate varPop on columns"
type RecruitingTeamVarPopFields {
  id: Float
  points: Float
  rank: Float
  year: Float
}
"aggregate varSamp on columns"
type RecruitingTeamVarSampFields {
  id: Float
  points: Float
  rank: Float
  year: Float
}
"aggregate variance on columns"
type RecruitingTeamVarianceFields {
  id: Float
  points: Float
  rank: Float
  year: Float
}
"""
columns and relationships of "scoreboard"
"""
type Scoreboard {
  awayClassification: division
  awayConference: String
  awayConferenceAbbreviation: String
  awayId: Int
  awayLineScores: [smallint!]
  awayPoints: smallint
  awayTeam: String
  city: String
  conferenceGame: Boolean
  currentClock: String
  currentPeriod: smallint
  currentPossession: String
  currentSituation: String
  homeClassification: division
  homeConference: String
  homeConferenceAbbreviation: String
  homeId: Int
  homeLineScores: [smallint!]
  homePoints: smallint
  homeTeam: String
  id: Int
  lastPlay: String
  moneylineAway: Int
  moneylineHome: Int
  neutralSite: Boolean
  overUnder: numeric
  spread: numeric
  startDate: timestamptz
  startTimeTbd: Boolean
  state: String
  status: game_status
  temperature: numeric
  tv: String
  venue: String
  weatherDescription: String
  windDirection: numeric
  windSpeed: numeric
}
"""
columns and relationships of "team_talent"
"""
type TeamTalent {
  talent: numeric!
  "An object relationship"
  team: currentTeams
  year: smallint!
}
"""
aggregated selection of "team_talent"
"""
type TeamTalentAggregate {
  aggregate: TeamTalentAggregateFields
  nodes: [TeamTalent!]!
}
"""
aggregate fields of "team_talent"
"""
type TeamTalentAggregateFields {
  avg: TeamTalentAvgFields
  count(columns: [TeamTalentSelectColumn!], distinct: Boolean): Int!
  max: TeamTalentMaxFields
  min: TeamTalentMinFields
  stddev: TeamTalentStddevFields
  stddevPop: TeamTalentStddevPopFields
  stddevSamp: TeamTalentStddevSampFields
  sum: TeamTalentSumFields
  varPop: TeamTalentVarPopFields
  varSamp: TeamTalentVarSampFields
  variance: TeamTalentVarianceFields
}
"aggregate avg on columns"
type TeamTalentAvgFields {
  talent: Float
  year: Float
}
"aggregate max on columns"
type TeamTalentMaxFields {
  talent: numeric
  year: smallint
}
"aggregate min on columns"
type TeamTalentMinFields {
  talent: numeric
  year: smallint
}
"aggregate stddev on columns"
type TeamTalentStddevFields {
  talent: Float
  year: Float
}
"aggregate stddevPop on columns"
type TeamTalentStddevPopFields {
  talent: Float
  year: Float
}
"aggregate stddevSamp on columns"
type TeamTalentStddevSampFields {
  talent: Float
  year: Float
}
"aggregate sum on columns"
type TeamTalentSumFields {
  talent: numeric
  year: smallint
}
"aggregate varPop on columns"
type TeamTalentVarPopFields {
  talent: Float
  year: Float
}
"aggregate varSamp on columns"
type TeamTalentVarSampFields {
  talent: Float
  year: Float
}
"aggregate variance on columns"
type TeamTalentVarianceFields {
  talent: Float
  year: Float
}
"""
columns and relationships of "transfer"
"""
type Transfer {
  eligibility: String
  firstName: String!
  "An object relationship"
  fromTeam: currentTeams
  lastName: String!
  "An object relationship"
  position: RecruitPosition
  rating: numeric
  season: smallint!
  stars: smallint
  "An object relationship"
  toTeam: currentTeams
  transferDate: timestamp
}
"""
columns and relationships of "weather_condition"
"""
type WeatherCondition {
  description: String!
  id: smallint!
}
"""
columns and relationships of "current_conferences"
"""
type currentTeams {
  abbreviation: String
  classification: division
  conference: String
  conferenceId: smallint
  division: String
  school: String
  teamId: Int
}
"""
aggregated selection of "current_conferences"
"""
type currentTeamsAggregate {
  aggregate: currentTeamsAggregateFields
  nodes: [currentTeams!]!
}
"""
aggregate fields of "current_conferences"
"""
type currentTeamsAggregateFields {
  avg: currentTeamsAvgFields
  count(columns: [currentTeamsSelectColumn!], distinct: Boolean): Int!
  max: currentTeamsMaxFields
  min: currentTeamsMinFields
  stddev: currentTeamsStddevFields
  stddevPop: currentTeamsStddevPopFields
  stddevSamp: currentTeamsStddevSampFields
  sum: currentTeamsSumFields
  varPop: currentTeamsVarPopFields
  varSamp: currentTeamsVarSampFields
  variance: currentTeamsVarianceFields
}
"aggregate avg on columns"
type currentTeamsAvgFields {
  conferenceId: Float
  teamId: Float
}
"aggregate max on columns"
type currentTeamsMaxFields {
  abbreviation: String
  classification: division
  conference: String
  conferenceId: smallint
  division: String
  school: String
  teamId: Int
}
"aggregate min on columns"
type currentTeamsMinFields {
  abbreviation: String
  classification: division
  conference: String
  conferenceId: smallint
  division: String
  school: String
  teamId: Int
}
"aggregate stddev on columns"
type currentTeamsStddevFields {
  conferenceId: Float
  teamId: Float
}
"aggregate stddevPop on columns"
type currentTeamsStddevPopFields {
  conferenceId: Float
  teamId: Float
}
"aggregate stddevSamp on columns"
type currentTeamsStddevSampFields {
  conferenceId: Float
  teamId: Float
}
"aggregate sum on columns"
type currentTeamsSumFields {
  conferenceId: smallint
  teamId: Int
}
"aggregate varPop on columns"
type currentTeamsVarPopFields {
  conferenceId: Float
  teamId: Float
}
"aggregate varSamp on columns"
type currentTeamsVarSampFields {
  conferenceId: Float
  teamId: Float
}
"aggregate variance on columns"
type currentTeamsVarianceFields {
  conferenceId: Float
  teamId: Float
}
"""
columns and relationships of "game_info"
"""
type game {
  attendance: Int
  awayClassification: division
  awayConference: String
  awayConferenceId: smallint
  "An object relationship"
  awayConferenceInfo: Conference
  awayEndElo: Int
  awayLineScores: [smallint!]
  awayPoints: smallint
  awayPostgameWinProb: numeric
  awayStartElo: Int
  awayTeam: String
  awayTeamId: Int
  "An object relationship"
  awayTeamInfo: currentTeams
  conferenceGame: Boolean
  excitement: numeric
  homeClassification: division
  homeConference: String
  homeConferenceId: smallint
  "An object relationship"
  homeConferenceInfo: Conference
  homeEndElo: Int
  homeLineScores: [smallint!]
  homePoints: smallint
  homePostgameWinProb: numeric
  homeStartElo: Int
  homeTeam: String
  homeTeamId: Int
  "An object relationship"
  homeTeamInfo: currentTeams
  id: Int
  "An array relationship"
  lines(
    "distinct select on columns"
    distinctOn: [GameLinesSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GameLinesOrderBy!],
    "filter the rows returned"
    where: GameLinesBoolExp
  ): [GameLines!]!
  "An aggregate relationship"
  linesAggregate(
    "distinct select on columns"
    distinctOn: [GameLinesSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GameLinesOrderBy!],
    "filter the rows returned"
    where: GameLinesBoolExp
  ): GameLinesAggregate!
  "An array relationship"
  mediaInfo(
    "distinct select on columns"
    distinctOn: [GameMediaSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GameMediaOrderBy!],
    "filter the rows returned"
    where: GameMediaBoolExp
  ): [GameMedia!]!
  neutralSite: Boolean
  notes: String
  season: smallint
  seasonType: season_type
  startDate: timestamp
  startTimeTbd: Boolean
  status: game_status
  venueId: Int
  "An object relationship"
  weather: GameWeather
  week: smallint
}
"""
aggregated selection of "game_info"
"""
type gameAggregate {
  aggregate: gameAggregateFields
  nodes: [game!]!
}
"""
aggregate fields of "game_info"
"""
type gameAggregateFields {
  avg: gameAvgFields
  count(columns: [gameSelectColumn!], distinct: Boolean): Int!
  max: gameMaxFields
  min: gameMinFields
  stddev: gameStddevFields
  stddevPop: gameStddevPopFields
  stddevSamp: gameStddevSampFields
  sum: gameSumFields
  varPop: gameVarPopFields
  varSamp: gameVarSampFields
  variance: gameVarianceFields
}
"aggregate avg on columns"
type gameAvgFields {
  attendance: Float
  awayConferenceId: Float
  awayEndElo: Float
  awayPoints: Float
  awayPostgameWinProb: Float
  awayStartElo: Float
  awayTeamId: Float
  excitement: Float
  homeConferenceId: Float
  homeEndElo: Float
  homePoints: Float
  homePostgameWinProb: Float
  homeStartElo: Float
  homeTeamId: Float
  id: Float
  season: Float
  venueId: Float
  week: Float
}
"aggregate max on columns"
type gameMaxFields {
  attendance: Int
  awayClassification: division
  awayConference: String
  awayConferenceId: smallint
  awayEndElo: Int
  awayLineScores: [smallint!]
  awayPoints: smallint
  awayPostgameWinProb: numeric
  awayStartElo: Int
  awayTeam: String
  awayTeamId: Int
  excitement: numeric
  homeClassification: division
  homeConference: String
  homeConferenceId: smallint
  homeEndElo: Int
  homeLineScores: [smallint!]
  homePoints: smallint
  homePostgameWinProb: numeric
  homeStartElo: Int
  homeTeam: String
  homeTeamId: Int
  id: Int
  notes: String
  season: smallint
  seasonType: season_type
  startDate: timestamp
  status: game_status
  venueId: Int
  week: smallint
}
"aggregate min on columns"
type gameMinFields {
  attendance: Int
  awayClassification: division
  awayConference: String
  awayConferenceId: smallint
  awayEndElo: Int
  awayLineScores: [smallint!]
  awayPoints: smallint
  awayPostgameWinProb: numeric
  awayStartElo: Int
  awayTeam: String
  awayTeamId: Int
  excitement: numeric
  homeClassification: division
  homeConference: String
  homeConferenceId: smallint
  homeEndElo: Int
  homeLineScores: [smallint!]
  homePoints: smallint
  homePostgameWinProb: numeric
  homeStartElo: Int
  homeTeam: String
  homeTeamId: Int
  id: Int
  notes: String
  season: smallint
  seasonType: season_type
  startDate: timestamp
  status: game_status
  venueId: Int
  week: smallint
}
"aggregate stddev on columns"
type gameStddevFields {
  attendance: Float
  awayConferenceId: Float
  awayEndElo: Float
  awayPoints: Float
  awayPostgameWinProb: Float
  awayStartElo: Float
  awayTeamId: Float
  excitement: Float
  homeConferenceId: Float
  homeEndElo: Float
  homePoints: Float
  homePostgameWinProb: Float
  homeStartElo: Float
  homeTeamId: Float
  id: Float
  season: Float
  venueId: Float
  week: Float
}
"aggregate stddevPop on columns"
type gameStddevPopFields {
  attendance: Float
  awayConferenceId: Float
  awayEndElo: Float
  awayPoints: Float
  awayPostgameWinProb: Float
  awayStartElo: Float
  awayTeamId: Float
  excitement: Float
  homeConferenceId: Float
  homeEndElo: Float
  homePoints: Float
  homePostgameWinProb: Float
  homeStartElo: Float
  homeTeamId: Float
  id: Float
  season: Float
  venueId: Float
  week: Float
}
"aggregate stddevSamp on columns"
type gameStddevSampFields {
  attendance: Float
  awayConferenceId: Float
  awayEndElo: Float
  awayPoints: Float
  awayPostgameWinProb: Float
  awayStartElo: Float
  awayTeamId: Float
  excitement: Float
  homeConferenceId: Float
  homeEndElo: Float
  homePoints: Float
  homePostgameWinProb: Float
  homeStartElo: Float
  homeTeamId: Float
  id: Float
  season: Float
  venueId: Float
  week: Float
}
"aggregate sum on columns"
type gameSumFields {
  attendance: Int
  awayConferenceId: smallint
  awayEndElo: Int
  awayPoints: smallint
  awayPostgameWinProb: numeric
  awayStartElo: Int
  awayTeamId: Int
  excitement: numeric
  homeConferenceId: smallint
  homeEndElo: Int
  homePoints: smallint
  homePostgameWinProb: numeric
  homeStartElo: Int
  homeTeamId: Int
  id: Int
  season: smallint
  venueId: Int
  week: smallint
}
"aggregate varPop on columns"
type gameVarPopFields {
  attendance: Float
  awayConferenceId: Float
  awayEndElo: Float
  awayPoints: Float
  awayPostgameWinProb: Float
  awayStartElo: Float
  awayTeamId: Float
  excitement: Float
  homeConferenceId: Float
  homeEndElo: Float
  homePoints: Float
  homePostgameWinProb: Float
  homeStartElo: Float
  homeTeamId: Float
  id: Float
  season: Float
  venueId: Float
  week: Float
}
"aggregate varSamp on columns"
type gameVarSampFields {
  attendance: Float
  awayConferenceId: Float
  awayEndElo: Float
  awayPoints: Float
  awayPostgameWinProb: Float
  awayStartElo: Float
  awayTeamId: Float
  excitement: Float
  homeConferenceId: Float
  homeEndElo: Float
  homePoints: Float
  homePostgameWinProb: Float
  homeStartElo: Float
  homeTeamId: Float
  id: Float
  season: Float
  venueId: Float
  week: Float
}
"aggregate variance on columns"
type gameVarianceFields {
  attendance: Float
  awayConferenceId: Float
  awayEndElo: Float
  awayPoints: Float
  awayPostgameWinProb: Float
  awayStartElo: Float
  awayTeamId: Float
  excitement: Float
  homeConferenceId: Float
  homeEndElo: Float
  homePoints: Float
  homePostgameWinProb: Float
  homeStartElo: Float
  homeTeamId: Float
  id: Float
  season: Float
  venueId: Float
  week: Float
}
"""
columns and relationships of "team_info"
"""
type historicalTeam {
  abbreviation: String
  active: Boolean
  altColor: String
  altName: String
  classification: division
  color: String
  conference: String
  conferenceAbbreviation: String
  conferenceId: smallint
  conferenceShortName: String
  countryCode: String
  displayName: String
  division: String
  endYear: smallint
  id: Int
  images: [String!]
  mascot: String
  ncaaName: String
  nickname: String
  school: String
  shortDisplayName: String
  startYear: smallint
  twitter: String
}
"""
aggregated selection of "team_info"
"""
type historicalTeamAggregate {
  aggregate: historicalTeamAggregateFields
  nodes: [historicalTeam!]!
}
"""
aggregate fields of "team_info"
"""
type historicalTeamAggregateFields {
  avg: historicalTeamAvgFields
  count(columns: [historicalTeamSelectColumn!], distinct: Boolean): Int!
  max: historicalTeamMaxFields
  min: historicalTeamMinFields
  stddev: historicalTeamStddevFields
  stddevPop: historicalTeamStddevPopFields
  stddevSamp: historicalTeamStddevSampFields
  sum: historicalTeamSumFields
  varPop: historicalTeamVarPopFields
  varSamp: historicalTeamVarSampFields
  variance: historicalTeamVarianceFields
}
"aggregate avg on columns"
type historicalTeamAvgFields {
  conferenceId: Float
  endYear: Float
  id: Float
  startYear: Float
}
"aggregate max on columns"
type historicalTeamMaxFields {
  abbreviation: String
  altColor: String
  altName: String
  classification: division
  color: String
  conference: String
  conferenceAbbreviation: String
  conferenceId: smallint
  conferenceShortName: String
  countryCode: String
  displayName: String
  division: String
  endYear: smallint
  id: Int
  images: [String!]
  mascot: String
  ncaaName: String
  nickname: String
  school: String
  shortDisplayName: String
  startYear: smallint
  twitter: String
}
"aggregate min on columns"
type historicalTeamMinFields {
  abbreviation: String
  altColor: String
  altName: String
  classification: division
  color: String
  conference: String
  conferenceAbbreviation: String
  conferenceId: smallint
  conferenceShortName: String
  countryCode: String
  displayName: String
  division: String
  endYear: smallint
  id: Int
  images: [String!]
  mascot: String
  ncaaName: String
  nickname: String
  school: String
  shortDisplayName: String
  startYear: smallint
  twitter: String
}
"aggregate stddev on columns"
type historicalTeamStddevFields {
  conferenceId: Float
  endYear: Float
  id: Float
  startYear: Float
}
"aggregate stddevPop on columns"
type historicalTeamStddevPopFields {
  conferenceId: Float
  endYear: Float
  id: Float
  startYear: Float
}
"aggregate stddevSamp on columns"
type historicalTeamStddevSampFields {
  conferenceId: Float
  endYear: Float
  id: Float
  startYear: Float
}
"aggregate sum on columns"
type historicalTeamSumFields {
  conferenceId: smallint
  endYear: smallint
  id: Int
  startYear: smallint
}
"aggregate varPop on columns"
type historicalTeamVarPopFields {
  conferenceId: Float
  endYear: Float
  id: Float
  startYear: Float
}
"aggregate varSamp on columns"
type historicalTeamVarSampFields {
  conferenceId: Float
  endYear: Float
  id: Float
  startYear: Float
}
"aggregate variance on columns"
type historicalTeamVarianceFields {
  conferenceId: Float
  endYear: Float
  id: Float
  startYear: Float
}
"""
columns and relationships of "ppa"
"""
type predictedPoints {
  distance: smallint!
  down: smallint!
  predictedPoints: numeric!
  yardLine: smallint!
}
"""
aggregated selection of "ppa"
"""
type predictedPointsAggregate {
  aggregate: predictedPointsAggregateFields
  nodes: [predictedPoints!]!
}
"""
aggregate fields of "ppa"
"""
type predictedPointsAggregateFields {
  avg: predictedPointsAvgFields
  count(columns: [predictedPointsSelectColumn!], distinct: Boolean): Int!
  max: predictedPointsMaxFields
  min: predictedPointsMinFields
  stddev: predictedPointsStddevFields
  stddevPop: predictedPointsStddevPopFields
  stddevSamp: predictedPointsStddevSampFields
  sum: predictedPointsSumFields
  varPop: predictedPointsVarPopFields
  varSamp: predictedPointsVarSampFields
  variance: predictedPointsVarianceFields
}
"aggregate avg on columns"
type predictedPointsAvgFields {
  distance: Float
  down: Float
  predictedPoints: Float
  yardLine: Float
}
"aggregate max on columns"
type predictedPointsMaxFields {
  distance: smallint
  down: smallint
  predictedPoints: numeric
  yardLine: smallint
}
"aggregate min on columns"
type predictedPointsMinFields {
  distance: smallint
  down: smallint
  predictedPoints: numeric
  yardLine: smallint
}
"aggregate stddev on columns"
type predictedPointsStddevFields {
  distance: Float
  down: Float
  predictedPoints: Float
  yardLine: Float
}
"aggregate stddevPop on columns"
type predictedPointsStddevPopFields {
  distance: Float
  down: Float
  predictedPoints: Float
  yardLine: Float
}
"aggregate stddevSamp on columns"
type predictedPointsStddevSampFields {
  distance: Float
  down: Float
  predictedPoints: Float
  yardLine: Float
}
"aggregate sum on columns"
type predictedPointsSumFields {
  distance: smallint
  down: smallint
  predictedPoints: numeric
  yardLine: smallint
}
"aggregate varPop on columns"
type predictedPointsVarPopFields {
  distance: Float
  down: Float
  predictedPoints: Float
  yardLine: Float
}
"aggregate varSamp on columns"
type predictedPointsVarSampFields {
  distance: Float
  down: Float
  predictedPoints: Float
  yardLine: Float
}
"aggregate variance on columns"
type predictedPointsVarianceFields {
  distance: Float
  down: Float
  predictedPoints: Float
  yardLine: Float
}
type query_root {
  "An array relationship"
  adjustedPlayerMetrics(
    "distinct select on columns"
    distinctOn: [AdjustedPlayerMetricsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AdjustedPlayerMetricsOrderBy!],
    "filter the rows returned"
    where: AdjustedPlayerMetricsBoolExp
  ): [AdjustedPlayerMetrics!]!
  "An aggregate relationship"
  adjustedPlayerMetricsAggregate(
    "distinct select on columns"
    distinctOn: [AdjustedPlayerMetricsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AdjustedPlayerMetricsOrderBy!],
    "filter the rows returned"
    where: AdjustedPlayerMetricsBoolExp
  ): AdjustedPlayerMetricsAggregate!
  """
  fetch data from the table: "adjusted_team_metrics"
  """
  adjustedTeamMetrics(
    "distinct select on columns"
    distinctOn: [AdjustedTeamMetricsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AdjustedTeamMetricsOrderBy!],
    "filter the rows returned"
    where: AdjustedTeamMetricsBoolExp
  ): [AdjustedTeamMetrics!]!
  """
  fetch aggregated fields from the table: "adjusted_team_metrics"
  """
  adjustedTeamMetricsAggregate(
    "distinct select on columns"
    distinctOn: [AdjustedTeamMetricsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AdjustedTeamMetricsOrderBy!],
    "filter the rows returned"
    where: AdjustedTeamMetricsBoolExp
  ): AdjustedTeamMetricsAggregate!
  """
  fetch data from the table: "athlete"
  """
  athlete(
    "distinct select on columns"
    distinctOn: [AthleteSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AthleteOrderBy!],
    "filter the rows returned"
    where: AthleteBoolExp
  ): [Athlete!]!
  """
  fetch aggregated fields from the table: "athlete"
  """
  athleteAggregate(
    "distinct select on columns"
    distinctOn: [AthleteSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AthleteOrderBy!],
    "filter the rows returned"
    where: AthleteBoolExp
  ): AthleteAggregate!
  """
  fetch data from the table: "athlete" using primary key columns
  """
  athleteByPk(id: bigint!): Athlete
  """
  fetch data from the table: "athlete_team"
  """
  athleteTeam(
    "distinct select on columns"
    distinctOn: [AthleteTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AthleteTeamOrderBy!],
    "filter the rows returned"
    where: AthleteTeamBoolExp
  ): [AthleteTeam!]!
  """
  fetch aggregated fields from the table: "athlete_team"
  """
  athleteTeamAggregate(
    "distinct select on columns"
    distinctOn: [AthleteTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AthleteTeamOrderBy!],
    "filter the rows returned"
    where: AthleteTeamBoolExp
  ): AthleteTeamAggregate!
  """
  fetch data from the table: "calendar"
  """
  calendar(
    "distinct select on columns"
    distinctOn: [CalendarSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [CalendarOrderBy!],
    "filter the rows returned"
    where: CalendarBoolExp
  ): [Calendar!]!
  """
  fetch data from the table: "coach"
  """
  coach(
    "distinct select on columns"
    distinctOn: [CoachSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [CoachOrderBy!],
    "filter the rows returned"
    where: CoachBoolExp
  ): [Coach!]!
  """
  fetch aggregated fields from the table: "coach"
  """
  coachAggregate(
    "distinct select on columns"
    distinctOn: [CoachSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [CoachOrderBy!],
    "filter the rows returned"
    where: CoachBoolExp
  ): CoachAggregate!
  """
  fetch data from the table: "coach_season"
  """
  coachSeason(
    "distinct select on columns"
    distinctOn: [CoachSeasonSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [CoachSeasonOrderBy!],
    "filter the rows returned"
    where: CoachSeasonBoolExp
  ): [CoachSeason!]!
  """
  fetch aggregated fields from the table: "coach_season"
  """
  coachSeasonAggregate(
    "distinct select on columns"
    distinctOn: [CoachSeasonSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [CoachSeasonOrderBy!],
    "filter the rows returned"
    where: CoachSeasonBoolExp
  ): CoachSeasonAggregate!
  """
  fetch data from the table: "conference"
  """
  conference(
    "distinct select on columns"
    distinctOn: [ConferenceSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [ConferenceOrderBy!],
    "filter the rows returned"
    where: ConferenceBoolExp
  ): [Conference!]!
  """
  fetch data from the table: "current_conferences"
  """
  currentTeams(
    "distinct select on columns"
    distinctOn: [currentTeamsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [currentTeamsOrderBy!],
    "filter the rows returned"
    where: currentTeamsBoolExp
  ): [currentTeams!]!
  """
  fetch aggregated fields from the table: "current_conferences"
  """
  currentTeamsAggregate(
    "distinct select on columns"
    distinctOn: [currentTeamsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [currentTeamsOrderBy!],
    "filter the rows returned"
    where: currentTeamsBoolExp
  ): currentTeamsAggregate!
  """
  fetch data from the table: "draft_picks"
  """
  draftPicks(
    "distinct select on columns"
    distinctOn: [DraftPicksSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [DraftPicksOrderBy!],
    "filter the rows returned"
    where: DraftPicksBoolExp
  ): [DraftPicks!]!
  """
  fetch data from the table: "draft_position"
  """
  draftPosition(
    "distinct select on columns"
    distinctOn: [DraftPositionSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [DraftPositionOrderBy!],
    "filter the rows returned"
    where: DraftPositionBoolExp
  ): [DraftPosition!]!
  """
  fetch data from the table: "draft_team"
  """
  draftTeam(
    "distinct select on columns"
    distinctOn: [DraftTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [DraftTeamOrderBy!],
    "filter the rows returned"
    where: DraftTeamBoolExp
  ): [DraftTeam!]!
  """
  fetch data from the table: "game_info"
  """
  game(
    "distinct select on columns"
    distinctOn: [gameSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [gameOrderBy!],
    "filter the rows returned"
    where: gameBoolExp
  ): [game!]!
  """
  fetch aggregated fields from the table: "game_info"
  """
  gameAggregate(
    "distinct select on columns"
    distinctOn: [gameSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [gameOrderBy!],
    "filter the rows returned"
    where: gameBoolExp
  ): gameAggregate!
  """
  fetch data from the table: "game_lines"
  """
  gameLines(
    "distinct select on columns"
    distinctOn: [GameLinesSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GameLinesOrderBy!],
    "filter the rows returned"
    where: GameLinesBoolExp
  ): [GameLines!]!
  """
  fetch aggregated fields from the table: "game_lines"
  """
  gameLinesAggregate(
    "distinct select on columns"
    distinctOn: [GameLinesSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GameLinesOrderBy!],
    "filter the rows returned"
    where: GameLinesBoolExp
  ): GameLinesAggregate!
  """
  fetch data from the table: "game_media"
  """
  gameMedia(
    "distinct select on columns"
    distinctOn: [GameMediaSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GameMediaOrderBy!],
    "filter the rows returned"
    where: GameMediaBoolExp
  ): [GameMedia!]!
  """
  fetch data from the table: "game_player_stat"
  """
  gamePlayerStat(
    "distinct select on columns"
    distinctOn: [GamePlayerStatSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GamePlayerStatOrderBy!],
    "filter the rows returned"
    where: GamePlayerStatBoolExp
  ): [GamePlayerStat!]!
  """
  fetch aggregated fields from the table: "game_player_stat"
  """
  gamePlayerStatAggregate(
    "distinct select on columns"
    distinctOn: [GamePlayerStatSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GamePlayerStatOrderBy!],
    "filter the rows returned"
    where: GamePlayerStatBoolExp
  ): GamePlayerStatAggregate!
  """
  fetch data from the table: "game_team"
  """
  gameTeam(
    "distinct select on columns"
    distinctOn: [GameTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GameTeamOrderBy!],
    "filter the rows returned"
    where: GameTeamBoolExp
  ): [GameTeam!]!
  """
  fetch data from the table: "game_weather"
  """
  gameWeather(
    "distinct select on columns"
    distinctOn: [GameWeatherSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GameWeatherOrderBy!],
    "filter the rows returned"
    where: GameWeatherBoolExp
  ): [GameWeather!]!
  """
  fetch data from the table: "team_info"
  """
  historicalTeam(
    "distinct select on columns"
    distinctOn: [historicalTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [historicalTeamOrderBy!],
    "filter the rows returned"
    where: historicalTeamBoolExp
  ): [historicalTeam!]!
  """
  fetch aggregated fields from the table: "team_info"
  """
  historicalTeamAggregate(
    "distinct select on columns"
    distinctOn: [historicalTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [historicalTeamOrderBy!],
    "filter the rows returned"
    where: historicalTeamBoolExp
  ): historicalTeamAggregate!
  """
  fetch data from the table: "hometown"
  """
  hometown(
    "distinct select on columns"
    distinctOn: [HometownSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [HometownOrderBy!],
    "filter the rows returned"
    where: HometownBoolExp
  ): [Hometown!]!
  """
  fetch aggregated fields from the table: "hometown"
  """
  hometownAggregate(
    "distinct select on columns"
    distinctOn: [HometownSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [HometownOrderBy!],
    "filter the rows returned"
    where: HometownBoolExp
  ): HometownAggregate!
  """
  fetch data from the table: "lines_provider"
  """
  linesProvider(
    "distinct select on columns"
    distinctOn: [LinesProviderSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [LinesProviderOrderBy!],
    "filter the rows returned"
    where: LinesProviderBoolExp
  ): [LinesProvider!]!
  """
  fetch aggregated fields from the table: "lines_provider"
  """
  linesProviderAggregate(
    "distinct select on columns"
    distinctOn: [LinesProviderSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [LinesProviderOrderBy!],
    "filter the rows returned"
    where: LinesProviderBoolExp
  ): LinesProviderAggregate!
  """
  fetch data from the table: "player_stat_category"
  """
  playerStatCategory(
    "distinct select on columns"
    distinctOn: [PlayerStatCategorySelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PlayerStatCategoryOrderBy!],
    "filter the rows returned"
    where: PlayerStatCategoryBoolExp
  ): [PlayerStatCategory!]!
  """
  fetch aggregated fields from the table: "player_stat_category"
  """
  playerStatCategoryAggregate(
    "distinct select on columns"
    distinctOn: [PlayerStatCategorySelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PlayerStatCategoryOrderBy!],
    "filter the rows returned"
    where: PlayerStatCategoryBoolExp
  ): PlayerStatCategoryAggregate!
  """
  fetch data from the table: "player_stat_type"
  """
  playerStatType(
    "distinct select on columns"
    distinctOn: [PlayerStatTypeSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PlayerStatTypeOrderBy!],
    "filter the rows returned"
    where: PlayerStatTypeBoolExp
  ): [PlayerStatType!]!
  """
  fetch aggregated fields from the table: "player_stat_type"
  """
  playerStatTypeAggregate(
    "distinct select on columns"
    distinctOn: [PlayerStatTypeSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PlayerStatTypeOrderBy!],
    "filter the rows returned"
    where: PlayerStatTypeBoolExp
  ): PlayerStatTypeAggregate!
  """
  fetch data from the table: "poll"
  """
  poll(
    "distinct select on columns"
    distinctOn: [PollSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PollOrderBy!],
    "filter the rows returned"
    where: PollBoolExp
  ): [Poll!]!
  """
  fetch data from the table: "poll_rank"
  """
  pollRank(
    "distinct select on columns"
    distinctOn: [PollRankSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PollRankOrderBy!],
    "filter the rows returned"
    where: PollRankBoolExp
  ): [PollRank!]!
  """
  fetch data from the table: "poll_type"
  """
  pollType(
    "distinct select on columns"
    distinctOn: [PollTypeSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PollTypeOrderBy!],
    "filter the rows returned"
    where: PollTypeBoolExp
  ): [PollType!]!
  """
  fetch data from the table: "position"
  """
  position(
    "distinct select on columns"
    distinctOn: [PositionSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PositionOrderBy!],
    "filter the rows returned"
    where: PositionBoolExp
  ): [Position!]!
  """
  fetch data from the table: "ppa"
  """
  predictedPoints(
    "distinct select on columns"
    distinctOn: [predictedPointsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [predictedPointsOrderBy!],
    "filter the rows returned"
    where: predictedPointsBoolExp
  ): [predictedPoints!]!
  """
  fetch aggregated fields from the table: "ppa"
  """
  predictedPointsAggregate(
    "distinct select on columns"
    distinctOn: [predictedPointsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [predictedPointsOrderBy!],
    "filter the rows returned"
    where: predictedPointsBoolExp
  ): predictedPointsAggregate!
  """
  fetch data from the table: "rating_systems"
  """
  ratings(
    "distinct select on columns"
    distinctOn: [ratingsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [ratingsOrderBy!],
    "filter the rows returned"
    where: ratingsBoolExp
  ): [ratings!]!
  """
  fetch data from the table: "recruit"
  """
  recruit(
    "distinct select on columns"
    distinctOn: [RecruitSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitOrderBy!],
    "filter the rows returned"
    where: RecruitBoolExp
  ): [Recruit!]!
  """
  fetch aggregated fields from the table: "recruit"
  """
  recruitAggregate(
    "distinct select on columns"
    distinctOn: [RecruitSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitOrderBy!],
    "filter the rows returned"
    where: RecruitBoolExp
  ): RecruitAggregate!
  """
  fetch data from the table: "recruit_position"
  """
  recruitPosition(
    "distinct select on columns"
    distinctOn: [RecruitPositionSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitPositionOrderBy!],
    "filter the rows returned"
    where: RecruitPositionBoolExp
  ): [RecruitPosition!]!
  """
  fetch aggregated fields from the table: "recruit_position"
  """
  recruitPositionAggregate(
    "distinct select on columns"
    distinctOn: [RecruitPositionSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitPositionOrderBy!],
    "filter the rows returned"
    where: RecruitPositionBoolExp
  ): RecruitPositionAggregate!
  """
  fetch data from the table: "recruit_school"
  """
  recruitSchool(
    "distinct select on columns"
    distinctOn: [RecruitSchoolSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitSchoolOrderBy!],
    "filter the rows returned"
    where: RecruitSchoolBoolExp
  ): [RecruitSchool!]!
  """
  fetch aggregated fields from the table: "recruit_school"
  """
  recruitSchoolAggregate(
    "distinct select on columns"
    distinctOn: [RecruitSchoolSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitSchoolOrderBy!],
    "filter the rows returned"
    where: RecruitSchoolBoolExp
  ): RecruitSchoolAggregate!
  """
  fetch data from the table: "recruiting_team"
  """
  recruitingTeam(
    "distinct select on columns"
    distinctOn: [RecruitingTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitingTeamOrderBy!],
    "filter the rows returned"
    where: RecruitingTeamBoolExp
  ): [RecruitingTeam!]!
  """
  fetch aggregated fields from the table: "recruiting_team"
  """
  recruitingTeamAggregate(
    "distinct select on columns"
    distinctOn: [RecruitingTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitingTeamOrderBy!],
    "filter the rows returned"
    where: RecruitingTeamBoolExp
  ): RecruitingTeamAggregate!
  """
  fetch data from the table: "scoreboard"
  """
  scoreboard(
    "distinct select on columns"
    distinctOn: [ScoreboardSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [ScoreboardOrderBy!],
    "filter the rows returned"
    where: ScoreboardBoolExp
  ): [Scoreboard!]!
  """
  fetch data from the table: "team_talent"
  """
  teamTalent(
    "distinct select on columns"
    distinctOn: [TeamTalentSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [TeamTalentOrderBy!],
    "filter the rows returned"
    where: TeamTalentBoolExp
  ): [TeamTalent!]!
  """
  fetch aggregated fields from the table: "team_talent"
  """
  teamTalentAggregate(
    "distinct select on columns"
    distinctOn: [TeamTalentSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [TeamTalentOrderBy!],
    "filter the rows returned"
    where: TeamTalentBoolExp
  ): TeamTalentAggregate!
  """
  fetch data from the table: "transfer"
  """
  transfer(
    "distinct select on columns"
    distinctOn: [TransferSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [TransferOrderBy!],
    "filter the rows returned"
    where: TransferBoolExp
  ): [Transfer!]!
  """
  fetch data from the table: "weather_condition"
  """
  weatherCondition(
    "distinct select on columns"
    distinctOn: [WeatherConditionSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [WeatherConditionOrderBy!],
    "filter the rows returned"
    where: WeatherConditionBoolExp
  ): [WeatherCondition!]!
}
"""
columns and relationships of "rating_systems"
"""
type ratings {
  conference: String
  conferenceId: smallint
  elo: Int
  fpi: numeric
  fpiAvgWinProbabilityRank: smallint
  fpiDefensiveEfficiency: numeric
  fpiGameControlRank: smallint
  fpiOffensiveEfficiency: numeric
  fpiOverallEfficiency: numeric
  fpiRemainingSosRank: smallint
  fpiResumeRank: smallint
  fpiSosRank: smallint
  fpiSpecialTeamsEfficiency: numeric
  fpiStrengthOfRecordRank: smallint
  spDefense: numeric
  spOffense: numeric
  spOverall: numeric
  spSpecialTeams: numeric
  srs: numeric
  team: String
  teamId: Int
  year: smallint
}
type subscription_root {
  "An array relationship"
  adjustedPlayerMetrics(
    "distinct select on columns"
    distinctOn: [AdjustedPlayerMetricsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AdjustedPlayerMetricsOrderBy!],
    "filter the rows returned"
    where: AdjustedPlayerMetricsBoolExp
  ): [AdjustedPlayerMetrics!]!
  "An aggregate relationship"
  adjustedPlayerMetricsAggregate(
    "distinct select on columns"
    distinctOn: [AdjustedPlayerMetricsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AdjustedPlayerMetricsOrderBy!],
    "filter the rows returned"
    where: AdjustedPlayerMetricsBoolExp
  ): AdjustedPlayerMetricsAggregate!
  """
  fetch data from the table: "adjusted_team_metrics"
  """
  adjustedTeamMetrics(
    "distinct select on columns"
    distinctOn: [AdjustedTeamMetricsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AdjustedTeamMetricsOrderBy!],
    "filter the rows returned"
    where: AdjustedTeamMetricsBoolExp
  ): [AdjustedTeamMetrics!]!
  """
  fetch aggregated fields from the table: "adjusted_team_metrics"
  """
  adjustedTeamMetricsAggregate(
    "distinct select on columns"
    distinctOn: [AdjustedTeamMetricsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AdjustedTeamMetricsOrderBy!],
    "filter the rows returned"
    where: AdjustedTeamMetricsBoolExp
  ): AdjustedTeamMetricsAggregate!
  """
  fetch data from the table: "athlete"
  """
  athlete(
    "distinct select on columns"
    distinctOn: [AthleteSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AthleteOrderBy!],
    "filter the rows returned"
    where: AthleteBoolExp
  ): [Athlete!]!
  """
  fetch aggregated fields from the table: "athlete"
  """
  athleteAggregate(
    "distinct select on columns"
    distinctOn: [AthleteSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AthleteOrderBy!],
    "filter the rows returned"
    where: AthleteBoolExp
  ): AthleteAggregate!
  """
  fetch data from the table: "athlete" using primary key columns
  """
  athleteByPk(id: bigint!): Athlete
  """
  fetch data from the table: "athlete_team"
  """
  athleteTeam(
    "distinct select on columns"
    distinctOn: [AthleteTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AthleteTeamOrderBy!],
    "filter the rows returned"
    where: AthleteTeamBoolExp
  ): [AthleteTeam!]!
  """
  fetch aggregated fields from the table: "athlete_team"
  """
  athleteTeamAggregate(
    "distinct select on columns"
    distinctOn: [AthleteTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [AthleteTeamOrderBy!],
    "filter the rows returned"
    where: AthleteTeamBoolExp
  ): AthleteTeamAggregate!
  """
  fetch data from the table: "calendar"
  """
  calendar(
    "distinct select on columns"
    distinctOn: [CalendarSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [CalendarOrderBy!],
    "filter the rows returned"
    where: CalendarBoolExp
  ): [Calendar!]!
  """
  fetch data from the table: "coach"
  """
  coach(
    "distinct select on columns"
    distinctOn: [CoachSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [CoachOrderBy!],
    "filter the rows returned"
    where: CoachBoolExp
  ): [Coach!]!
  """
  fetch aggregated fields from the table: "coach"
  """
  coachAggregate(
    "distinct select on columns"
    distinctOn: [CoachSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [CoachOrderBy!],
    "filter the rows returned"
    where: CoachBoolExp
  ): CoachAggregate!
  """
  fetch data from the table: "coach_season"
  """
  coachSeason(
    "distinct select on columns"
    distinctOn: [CoachSeasonSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [CoachSeasonOrderBy!],
    "filter the rows returned"
    where: CoachSeasonBoolExp
  ): [CoachSeason!]!
  """
  fetch aggregated fields from the table: "coach_season"
  """
  coachSeasonAggregate(
    "distinct select on columns"
    distinctOn: [CoachSeasonSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [CoachSeasonOrderBy!],
    "filter the rows returned"
    where: CoachSeasonBoolExp
  ): CoachSeasonAggregate!
  """
  fetch data from the table: "conference"
  """
  conference(
    "distinct select on columns"
    distinctOn: [ConferenceSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [ConferenceOrderBy!],
    "filter the rows returned"
    where: ConferenceBoolExp
  ): [Conference!]!
  """
  fetch data from the table: "current_conferences"
  """
  currentTeams(
    "distinct select on columns"
    distinctOn: [currentTeamsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [currentTeamsOrderBy!],
    "filter the rows returned"
    where: currentTeamsBoolExp
  ): [currentTeams!]!
  """
  fetch aggregated fields from the table: "current_conferences"
  """
  currentTeamsAggregate(
    "distinct select on columns"
    distinctOn: [currentTeamsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [currentTeamsOrderBy!],
    "filter the rows returned"
    where: currentTeamsBoolExp
  ): currentTeamsAggregate!
  """
  fetch data from the table: "draft_picks"
  """
  draftPicks(
    "distinct select on columns"
    distinctOn: [DraftPicksSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [DraftPicksOrderBy!],
    "filter the rows returned"
    where: DraftPicksBoolExp
  ): [DraftPicks!]!
  """
  fetch data from the table: "draft_position"
  """
  draftPosition(
    "distinct select on columns"
    distinctOn: [DraftPositionSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [DraftPositionOrderBy!],
    "filter the rows returned"
    where: DraftPositionBoolExp
  ): [DraftPosition!]!
  """
  fetch data from the table: "draft_team"
  """
  draftTeam(
    "distinct select on columns"
    distinctOn: [DraftTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [DraftTeamOrderBy!],
    "filter the rows returned"
    where: DraftTeamBoolExp
  ): [DraftTeam!]!
  """
  fetch data from the table: "game_info"
  """
  game(
    "distinct select on columns"
    distinctOn: [gameSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [gameOrderBy!],
    "filter the rows returned"
    where: gameBoolExp
  ): [game!]!
  """
  fetch aggregated fields from the table: "game_info"
  """
  gameAggregate(
    "distinct select on columns"
    distinctOn: [gameSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [gameOrderBy!],
    "filter the rows returned"
    where: gameBoolExp
  ): gameAggregate!
  """
  fetch data from the table: "game_lines"
  """
  gameLines(
    "distinct select on columns"
    distinctOn: [GameLinesSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GameLinesOrderBy!],
    "filter the rows returned"
    where: GameLinesBoolExp
  ): [GameLines!]!
  """
  fetch aggregated fields from the table: "game_lines"
  """
  gameLinesAggregate(
    "distinct select on columns"
    distinctOn: [GameLinesSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GameLinesOrderBy!],
    "filter the rows returned"
    where: GameLinesBoolExp
  ): GameLinesAggregate!
  """
  fetch data from the table: "game_media"
  """
  gameMedia(
    "distinct select on columns"
    distinctOn: [GameMediaSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GameMediaOrderBy!],
    "filter the rows returned"
    where: GameMediaBoolExp
  ): [GameMedia!]!
  """
  fetch data from the table: "game_player_stat"
  """
  gamePlayerStat(
    "distinct select on columns"
    distinctOn: [GamePlayerStatSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GamePlayerStatOrderBy!],
    "filter the rows returned"
    where: GamePlayerStatBoolExp
  ): [GamePlayerStat!]!
  """
  fetch aggregated fields from the table: "game_player_stat"
  """
  gamePlayerStatAggregate(
    "distinct select on columns"
    distinctOn: [GamePlayerStatSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GamePlayerStatOrderBy!],
    "filter the rows returned"
    where: GamePlayerStatBoolExp
  ): GamePlayerStatAggregate!
  """
  fetch data from the table: "game_team"
  """
  gameTeam(
    "distinct select on columns"
    distinctOn: [GameTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GameTeamOrderBy!],
    "filter the rows returned"
    where: GameTeamBoolExp
  ): [GameTeam!]!
  """
  fetch data from the table: "game_weather"
  """
  gameWeather(
    "distinct select on columns"
    distinctOn: [GameWeatherSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [GameWeatherOrderBy!],
    "filter the rows returned"
    where: GameWeatherBoolExp
  ): [GameWeather!]!
  """
  fetch data from the table: "team_info"
  """
  historicalTeam(
    "distinct select on columns"
    distinctOn: [historicalTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [historicalTeamOrderBy!],
    "filter the rows returned"
    where: historicalTeamBoolExp
  ): [historicalTeam!]!
  """
  fetch aggregated fields from the table: "team_info"
  """
  historicalTeamAggregate(
    "distinct select on columns"
    distinctOn: [historicalTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [historicalTeamOrderBy!],
    "filter the rows returned"
    where: historicalTeamBoolExp
  ): historicalTeamAggregate!
  """
  fetch data from the table: "hometown"
  """
  hometown(
    "distinct select on columns"
    distinctOn: [HometownSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [HometownOrderBy!],
    "filter the rows returned"
    where: HometownBoolExp
  ): [Hometown!]!
  """
  fetch aggregated fields from the table: "hometown"
  """
  hometownAggregate(
    "distinct select on columns"
    distinctOn: [HometownSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [HometownOrderBy!],
    "filter the rows returned"
    where: HometownBoolExp
  ): HometownAggregate!
  """
  fetch data from the table: "lines_provider"
  """
  linesProvider(
    "distinct select on columns"
    distinctOn: [LinesProviderSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [LinesProviderOrderBy!],
    "filter the rows returned"
    where: LinesProviderBoolExp
  ): [LinesProvider!]!
  """
  fetch aggregated fields from the table: "lines_provider"
  """
  linesProviderAggregate(
    "distinct select on columns"
    distinctOn: [LinesProviderSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [LinesProviderOrderBy!],
    "filter the rows returned"
    where: LinesProviderBoolExp
  ): LinesProviderAggregate!
  """
  fetch data from the table: "player_stat_category"
  """
  playerStatCategory(
    "distinct select on columns"
    distinctOn: [PlayerStatCategorySelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PlayerStatCategoryOrderBy!],
    "filter the rows returned"
    where: PlayerStatCategoryBoolExp
  ): [PlayerStatCategory!]!
  """
  fetch aggregated fields from the table: "player_stat_category"
  """
  playerStatCategoryAggregate(
    "distinct select on columns"
    distinctOn: [PlayerStatCategorySelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PlayerStatCategoryOrderBy!],
    "filter the rows returned"
    where: PlayerStatCategoryBoolExp
  ): PlayerStatCategoryAggregate!
  """
  fetch data from the table: "player_stat_type"
  """
  playerStatType(
    "distinct select on columns"
    distinctOn: [PlayerStatTypeSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PlayerStatTypeOrderBy!],
    "filter the rows returned"
    where: PlayerStatTypeBoolExp
  ): [PlayerStatType!]!
  """
  fetch aggregated fields from the table: "player_stat_type"
  """
  playerStatTypeAggregate(
    "distinct select on columns"
    distinctOn: [PlayerStatTypeSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PlayerStatTypeOrderBy!],
    "filter the rows returned"
    where: PlayerStatTypeBoolExp
  ): PlayerStatTypeAggregate!
  """
  fetch data from the table: "poll"
  """
  poll(
    "distinct select on columns"
    distinctOn: [PollSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PollOrderBy!],
    "filter the rows returned"
    where: PollBoolExp
  ): [Poll!]!
  """
  fetch data from the table: "poll_rank"
  """
  pollRank(
    "distinct select on columns"
    distinctOn: [PollRankSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PollRankOrderBy!],
    "filter the rows returned"
    where: PollRankBoolExp
  ): [PollRank!]!
  """
  fetch data from the table: "poll_type"
  """
  pollType(
    "distinct select on columns"
    distinctOn: [PollTypeSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PollTypeOrderBy!],
    "filter the rows returned"
    where: PollTypeBoolExp
  ): [PollType!]!
  """
  fetch data from the table: "position"
  """
  position(
    "distinct select on columns"
    distinctOn: [PositionSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [PositionOrderBy!],
    "filter the rows returned"
    where: PositionBoolExp
  ): [Position!]!
  """
  fetch data from the table: "ppa"
  """
  predictedPoints(
    "distinct select on columns"
    distinctOn: [predictedPointsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [predictedPointsOrderBy!],
    "filter the rows returned"
    where: predictedPointsBoolExp
  ): [predictedPoints!]!
  """
  fetch aggregated fields from the table: "ppa"
  """
  predictedPointsAggregate(
    "distinct select on columns"
    distinctOn: [predictedPointsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [predictedPointsOrderBy!],
    "filter the rows returned"
    where: predictedPointsBoolExp
  ): predictedPointsAggregate!
  """
  fetch data from the table: "rating_systems"
  """
  ratings(
    "distinct select on columns"
    distinctOn: [ratingsSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [ratingsOrderBy!],
    "filter the rows returned"
    where: ratingsBoolExp
  ): [ratings!]!
  """
  fetch data from the table: "recruit"
  """
  recruit(
    "distinct select on columns"
    distinctOn: [RecruitSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitOrderBy!],
    "filter the rows returned"
    where: RecruitBoolExp
  ): [Recruit!]!
  """
  fetch aggregated fields from the table: "recruit"
  """
  recruitAggregate(
    "distinct select on columns"
    distinctOn: [RecruitSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitOrderBy!],
    "filter the rows returned"
    where: RecruitBoolExp
  ): RecruitAggregate!
  """
  fetch data from the table: "recruit_position"
  """
  recruitPosition(
    "distinct select on columns"
    distinctOn: [RecruitPositionSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitPositionOrderBy!],
    "filter the rows returned"
    where: RecruitPositionBoolExp
  ): [RecruitPosition!]!
  """
  fetch aggregated fields from the table: "recruit_position"
  """
  recruitPositionAggregate(
    "distinct select on columns"
    distinctOn: [RecruitPositionSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitPositionOrderBy!],
    "filter the rows returned"
    where: RecruitPositionBoolExp
  ): RecruitPositionAggregate!
  """
  fetch data from the table: "recruit_school"
  """
  recruitSchool(
    "distinct select on columns"
    distinctOn: [RecruitSchoolSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitSchoolOrderBy!],
    "filter the rows returned"
    where: RecruitSchoolBoolExp
  ): [RecruitSchool!]!
  """
  fetch aggregated fields from the table: "recruit_school"
  """
  recruitSchoolAggregate(
    "distinct select on columns"
    distinctOn: [RecruitSchoolSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitSchoolOrderBy!],
    "filter the rows returned"
    where: RecruitSchoolBoolExp
  ): RecruitSchoolAggregate!
  """
  fetch data from the table: "recruiting_team"
  """
  recruitingTeam(
    "distinct select on columns"
    distinctOn: [RecruitingTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitingTeamOrderBy!],
    "filter the rows returned"
    where: RecruitingTeamBoolExp
  ): [RecruitingTeam!]!
  """
  fetch aggregated fields from the table: "recruiting_team"
  """
  recruitingTeamAggregate(
    "distinct select on columns"
    distinctOn: [RecruitingTeamSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [RecruitingTeamOrderBy!],
    "filter the rows returned"
    where: RecruitingTeamBoolExp
  ): RecruitingTeamAggregate!
  """
  fetch data from the table: "scoreboard"
  """
  scoreboard(
    "distinct select on columns"
    distinctOn: [ScoreboardSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [ScoreboardOrderBy!],
    "filter the rows returned"
    where: ScoreboardBoolExp
  ): [Scoreboard!]!
  """
  fetch data from the table: "team_talent"
  """
  teamTalent(
    "distinct select on columns"
    distinctOn: [TeamTalentSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [TeamTalentOrderBy!],
    "filter the rows returned"
    where: TeamTalentBoolExp
  ): [TeamTalent!]!
  """
  fetch aggregated fields from the table: "team_talent"
  """
  teamTalentAggregate(
    "distinct select on columns"
    distinctOn: [TeamTalentSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [TeamTalentOrderBy!],
    "filter the rows returned"
    where: TeamTalentBoolExp
  ): TeamTalentAggregate!
  """
  fetch data from the table: "transfer"
  """
  transfer(
    "distinct select on columns"
    distinctOn: [TransferSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [TransferOrderBy!],
    "filter the rows returned"
    where: TransferBoolExp
  ): [Transfer!]!
  """
  fetch data from the table: "weather_condition"
  """
  weatherCondition(
    "distinct select on columns"
    distinctOn: [WeatherConditionSelectColumn!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    orderBy: [WeatherConditionOrderBy!],
    "filter the rows returned"
    where: WeatherConditionBoolExp
  ): [WeatherCondition!]!
}
"""
select columns of table "adjusted_player_metrics"
"""
enum AdjustedPlayerMetricsSelectColumn {
  "column name"
  athleteId
  "column name"
  metricType
  "column name"
  metricValue
  "column name"
  plays
  "column name"
  year
}
"""
select columns of table "adjusted_team_metrics"
"""
enum AdjustedTeamMetricsSelectColumn {
  "column name"
  epa
  "column name"
  epaAllowed
  "column name"
  explosiveness
  "column name"
  explosivenessAllowed
  "column name"
  highlightYards
  "column name"
  highlightYardsAllowed
  "column name"
  lineYards
  "column name"
  lineYardsAllowed
  "column name"
  openFieldYards
  "column name"
  openFieldYardsAllowed
  "column name"
  passingDownsSuccess
  "column name"
  passingDownsSuccessAllowed
  "column name"
  passingEpa
  "column name"
  passingEpaAllowed
  "column name"
  rushingEpa
  "column name"
  rushingEpaAllowed
  "column name"
  secondLevelYards
  "column name"
  secondLevelYardsAllowed
  "column name"
  standardDownsSuccess
  "column name"
  standardDownsSuccessAllowed
  "column name"
  success
  "column name"
  successAllowed
  "column name"
  teamId
  "column name"
  year
}
"""
select columns of table "athlete"
"""
enum AthleteSelectColumn {
  "column name"
  firstName
  "column name"
  height
  "column name"
  hometownId
  "column name"
  id
  "column name"
  jersey
  "column name"
  lastName
  "column name"
  name
  "column name"
  positionId
  "column name"
  teamId
  "column name"
  weight
}
"""
select columns of table "athlete_team"
"""
enum AthleteTeamSelectColumn {
  "column name"
  athleteId
  "column name"
  endYear
  "column name"
  startYear
  "column name"
  teamId
}
"""
select columns of table "calendar"
"""
enum CalendarSelectColumn {
  "column name"
  endDate
  "column name"
  seasonType
  "column name"
  startDate
  "column name"
  week
  "column name"
  year
}
"""
select columns of table "coach_season"
"""
enum CoachSeasonSelectColumn {
  "column name"
  games
  "column name"
  losses
  "column name"
  postseasonRank
  "column name"
  preseasonRank
  "column name"
  ties
  "column name"
  wins
  "column name"
  year
}
"""
select columns of table "coach"
"""
enum CoachSelectColumn {
  "column name"
  firstName
  "column name"
  id
  "column name"
  lastName
}
"""
select columns of table "conference"
"""
enum ConferenceSelectColumn {
  "column name"
  abbreviation
  "column name"
  division
  "column name"
  id
  "column name"
  name
  "column name"
  shortName
  "column name"
  srName
}
"""
select columns of table "draft_picks"
"""
enum DraftPicksSelectColumn {
  "column name"
  collegeId
  "column name"
  collegeTeamId
  "column name"
  grade
  "column name"
  height
  "column name"
  name
  "column name"
  nflTeamId
  "column name"
  overall
  "column name"
  overallRank
  "column name"
  pick
  "column name"
  positionId
  "column name"
  positionRank
  "column name"
  round
  "column name"
  weight
  "column name"
  year
}
"""
select columns of table "draft_position"
"""
enum DraftPositionSelectColumn {
  "column name"
  abbreviation
  "column name"
  id
  "column name"
  name
}
"""
select columns of table "draft_team"
"""
enum DraftTeamSelectColumn {
  "column name"
  displayName
  "column name"
  id
  "column name"
  location
  "column name"
  logo
  "column name"
  mascot
  "column name"
  nickname
  "column name"
  shortDisplayName
}
"""
select columns of table "game_lines"
"""
enum GameLinesSelectColumn {
  "column name"
  gameId
  "column name"
  linesProviderId
  "column name"
  moneylineAway
  "column name"
  moneylineHome
  "column name"
  overUnder
  "column name"
  overUnderOpen
  "column name"
  spread
  "column name"
  spreadOpen
}
"""
select columns of table "game_media"
"""
enum GameMediaSelectColumn {
  "column name"
  mediaType
  "column name"
  name
}
"""
select columns of table "game_player_stat"
"""
enum GamePlayerStatSelectColumn {
  "column name"
  athleteId
  "column name"
  gameTeamId
  "column name"
  id
  "column name"
  stat
}
"""
select columns of table "game_team"
"""
enum GameTeamSelectColumn {
  "column name"
  endElo
  "column name"
  gameId
  "column name"
  homeAway
  "column name"
  lineScores
  "column name"
  points
  "column name"
  startElo
  "column name"
  teamId
  "column name"
  winProb
}
"""
select columns of table "game_weather"
"""
enum GameWeatherSelectColumn {
  "column name"
  dewpoint
  "column name"
  gameId
  "column name"
  humidity
  "column name"
  precipitation
  "column name"
  pressure
  "column name"
  snowfall
  "column name"
  temperature
  "column name"
  weatherConditionCode
  "column name"
  windDirection
  "column name"
  windGust
  "column name"
  windSpeed
}
"""
select columns of table "hometown"
"""
enum HometownSelectColumn {
  "column name"
  city
  "column name"
  country
  "column name"
  countyFips
  "column name"
  latitude
  "column name"
  longitude
  "column name"
  state
}
"""
select columns of table "lines_provider"
"""
enum LinesProviderSelectColumn {
  "column name"
  id
  "column name"
  name
}
"column ordering options"
enum OrderBy {
  "in ascending order, nulls last"
  ASC
  "in ascending order, nulls first"
  ASC_NULLS_FIRST
  "in ascending order, nulls last"
  ASC_NULLS_LAST
  "in descending order, nulls first"
  DESC
  "in descending order, nulls first"
  DESC_NULLS_FIRST
  "in descending order, nulls last"
  DESC_NULLS_LAST
}
"""
select columns of table "player_stat_category"
"""
enum PlayerStatCategorySelectColumn {
  "column name"
  name
}
"""
select columns of table "player_stat_type"
"""
enum PlayerStatTypeSelectColumn {
  "column name"
  name
}
"""
select columns of table "poll_rank"
"""
enum PollRankSelectColumn {
  "column name"
  firstPlaceVotes
  "column name"
  points
  "column name"
  rank
}
"""
select columns of table "poll"
"""
enum PollSelectColumn {
  "column name"
  season
  "column name"
  seasonType
  "column name"
  week
}
"""
select columns of table "poll_type"
"""
enum PollTypeSelectColumn {
  "column name"
  abbreviation
  "column name"
  id
  "column name"
  name
  "column name"
  shortName
}
"""
select columns of table "position"
"""
enum PositionSelectColumn {
  "column name"
  abbreviation
  "column name"
  displayName
  "column name"
  id
  "column name"
  name
}
"""
select columns of table "recruit_position"
"""
enum RecruitPositionSelectColumn {
  "column name"
  id
  "column name"
  position
  "column name"
  positionGroup
}
"""
select columns of table "recruit_school"
"""
enum RecruitSchoolSelectColumn {
  "column name"
  id
  "column name"
  name
}
"""
select columns of table "recruit"
"""
enum RecruitSelectColumn {
  "column name"
  height
  "column name"
  id
  "column name"
  name
  "column name"
  overallRank
  "column name"
  positionRank
  "column name"
  ranking
  "column name"
  rating
  "column name"
  recruitType
  "column name"
  stars
  "column name"
  weight
  "column name"
  year
}
"""
select columns of table "recruiting_team"
"""
enum RecruitingTeamSelectColumn {
  "column name"
  id
  "column name"
  points
  "column name"
  rank
  "column name"
  year
}
"""
select columns of table "scoreboard"
"""
enum ScoreboardSelectColumn {
  "column name"
  awayClassification
  "column name"
  awayConference
  "column name"
  awayConferenceAbbreviation
  "column name"
  awayId
  "column name"
  awayLineScores
  "column name"
  awayPoints
  "column name"
  awayTeam
  "column name"
  city
  "column name"
  conferenceGame
  "column name"
  currentClock
  "column name"
  currentPeriod
  "column name"
  currentPossession
  "column name"
  currentSituation
  "column name"
  homeClassification
  "column name"
  homeConference
  "column name"
  homeConferenceAbbreviation
  "column name"
  homeId
  "column name"
  homeLineScores
  "column name"
  homePoints
  "column name"
  homeTeam
  "column name"
  id
  "column name"
  lastPlay
  "column name"
  moneylineAway
  "column name"
  moneylineHome
  "column name"
  neutralSite
  "column name"
  overUnder
  "column name"
  spread
  "column name"
  startDate
  "column name"
  startTimeTbd
  "column name"
  state
  "column name"
  status
  "column name"
  temperature
  "column name"
  tv
  "column name"
  venue
  "column name"
  weatherDescription
  "column name"
  windDirection
  "column name"
  windSpeed
}
"""
select columns of table "team_talent"
"""
enum TeamTalentSelectColumn {
  "column name"
  talent
  "column name"
  year
}
"""
select columns of table "transfer"
"""
enum TransferSelectColumn {
  "column name"
  eligibility
  "column name"
  firstName
  "column name"
  lastName
  "column name"
  rating
  "column name"
  season
  "column name"
  stars
  "column name"
  transferDate
}
"""
select columns of table "weather_condition"
"""
enum WeatherConditionSelectColumn {
  "column name"
  description
  "column name"
  id
}
"""
select columns of table "current_conferences"
"""
enum currentTeamsSelectColumn {
  "column name"
  abbreviation
  "column name"
  classification
  "column name"
  conference
  "column name"
  conferenceId
  "column name"
  division
  "column name"
  school
  "column name"
  teamId
}
"""
select columns of table "game_info"
"""
enum gameSelectColumn {
  "column name"
  attendance
  "column name"
  awayClassification
  "column name"
  awayConference
  "column name"
  awayConferenceId
  "column name"
  awayEndElo
  "column name"
  awayLineScores
  "column name"
  awayPoints
  "column name"
  awayPostgameWinProb
  "column name"
  awayStartElo
  "column name"
  awayTeam
  "column name"
  awayTeamId
  "column name"
  conferenceGame
  "column name"
  excitement
  "column name"
  homeClassification
  "column name"
  homeConference
  "column name"
  homeConferenceId
  "column name"
  homeEndElo
  "column name"
  homeLineScores
  "column name"
  homePoints
  "column name"
  homePostgameWinProb
  "column name"
  homeStartElo
  "column name"
  homeTeam
  "column name"
  homeTeamId
  "column name"
  id
  "column name"
  neutralSite
  "column name"
  notes
  "column name"
  season
  "column name"
  seasonType
  "column name"
  startDate
  "column name"
  startTimeTbd
  "column name"
  status
  "column name"
  venueId
  "column name"
  week
}
"""
select columns of table "team_info"
"""
enum historicalTeamSelectColumn {
  "column name"
  abbreviation
  "column name"
  active
  "column name"
  altColor
  "column name"
  altName
  "column name"
  classification
  "column name"
  color
  "column name"
  conference
  "column name"
  conferenceAbbreviation
  "column name"
  conferenceId
  "column name"
  conferenceShortName
  "column name"
  countryCode
  "column name"
  displayName
  "column name"
  division
  "column name"
  endYear
  "column name"
  id
  "column name"
  images
  "column name"
  mascot
  "column name"
  ncaaName
  "column name"
  nickname
  "column name"
  school
  "column name"
  shortDisplayName
  "column name"
  startYear
  "column name"
  twitter
}
"""
select columns of table "ppa"
"""
enum predictedPointsSelectColumn {
  "column name"
  distance
  "column name"
  down
  "column name"
  predictedPoints
  "column name"
  yardLine
}
"""
select columns of table "rating_systems"
"""
enum ratingsSelectColumn {
  "column name"
  conference
  "column name"
  conferenceId
  "column name"
  elo
  "column name"
  fpi
  "column name"
  fpiAvgWinProbabilityRank
  "column name"
  fpiDefensiveEfficiency
  "column name"
  fpiGameControlRank
  "column name"
  fpiOffensiveEfficiency
  "column name"
  fpiOverallEfficiency
  "column name"
  fpiRemainingSosRank
  "column name"
  fpiResumeRank
  "column name"
  fpiSosRank
  "column name"
  fpiSpecialTeamsEfficiency
  "column name"
  fpiStrengthOfRecordRank
  "column name"
  spDefense
  "column name"
  spOffense
  "column name"
  spOverall
  "column name"
  spSpecialTeams
  "column name"
  srs
  "column name"
  team
  "column name"
  teamId
  "column name"
  year
}
input AdjustedPlayerMetricsAggregateBoolExp {
  count: adjustedPlayerMetricsAggregateBoolExpCount
}
"""
order by aggregate values of table "adjusted_player_metrics"
"""
input AdjustedPlayerMetricsAggregateOrderBy {
  avg: AdjustedPlayerMetricsAvgOrderBy
  count: OrderBy
  max: AdjustedPlayerMetricsMaxOrderBy
  min: AdjustedPlayerMetricsMinOrderBy
  stddev: AdjustedPlayerMetricsStddevOrderBy
  stddevPop: AdjustedPlayerMetricsStddevPopOrderBy
  stddevSamp: AdjustedPlayerMetricsStddevSampOrderBy
  sum: AdjustedPlayerMetricsSumOrderBy
  varPop: AdjustedPlayerMetricsVarPopOrderBy
  varSamp: AdjustedPlayerMetricsVarSampOrderBy
  variance: AdjustedPlayerMetricsVarianceOrderBy
}
"""
order by avg() on columns of table "adjusted_player_metrics"
"""
input AdjustedPlayerMetricsAvgOrderBy {
  athleteId: OrderBy
  metricValue: OrderBy
  plays: OrderBy
  year: OrderBy
}
"""
Boolean expression to filter rows from the table "adjusted_player_metrics". All fields are combined with a logical 'AND'.
"""
input AdjustedPlayerMetricsBoolExp {
  _and: [AdjustedPlayerMetricsBoolExp!]
  _not: AdjustedPlayerMetricsBoolExp
  _or: [AdjustedPlayerMetricsBoolExp!]
  athlete: AthleteBoolExp
  athleteId: BigintComparisonExp
  metricType: PlayerAdjustedMetricTypeComparisonExp
  metricValue: NumericComparisonExp
  plays: SmallintComparisonExp
  year: SmallintComparisonExp
}
"""
order by max() on columns of table "adjusted_player_metrics"
"""
input AdjustedPlayerMetricsMaxOrderBy {
  athleteId: OrderBy
  metricType: OrderBy
  metricValue: OrderBy
  plays: OrderBy
  year: OrderBy
}
"""
order by min() on columns of table "adjusted_player_metrics"
"""
input AdjustedPlayerMetricsMinOrderBy {
  athleteId: OrderBy
  metricType: OrderBy
  metricValue: OrderBy
  plays: OrderBy
  year: OrderBy
}
"""
Ordering options when selecting data from "adjusted_player_metrics".
"""
input AdjustedPlayerMetricsOrderBy {
  athlete: AthleteOrderBy
  athleteId: OrderBy
  metricType: OrderBy
  metricValue: OrderBy
  plays: OrderBy
  year: OrderBy
}
"""
order by stddev() on columns of table "adjusted_player_metrics"
"""
input AdjustedPlayerMetricsStddevOrderBy {
  athleteId: OrderBy
  metricValue: OrderBy
  plays: OrderBy
  year: OrderBy
}
"""
order by stddevPop() on columns of table "adjusted_player_metrics"
"""
input AdjustedPlayerMetricsStddevPopOrderBy {
  athleteId: OrderBy
  metricValue: OrderBy
  plays: OrderBy
  year: OrderBy
}
"""
order by stddevSamp() on columns of table "adjusted_player_metrics"
"""
input AdjustedPlayerMetricsStddevSampOrderBy {
  athleteId: OrderBy
  metricValue: OrderBy
  plays: OrderBy
  year: OrderBy
}
"""
order by sum() on columns of table "adjusted_player_metrics"
"""
input AdjustedPlayerMetricsSumOrderBy {
  athleteId: OrderBy
  metricValue: OrderBy
  plays: OrderBy
  year: OrderBy
}
"""
order by varPop() on columns of table "adjusted_player_metrics"
"""
input AdjustedPlayerMetricsVarPopOrderBy {
  athleteId: OrderBy
  metricValue: OrderBy
  plays: OrderBy
  year: OrderBy
}
"""
order by varSamp() on columns of table "adjusted_player_metrics"
"""
input AdjustedPlayerMetricsVarSampOrderBy {
  athleteId: OrderBy
  metricValue: OrderBy
  plays: OrderBy
  year: OrderBy
}
"""
order by variance() on columns of table "adjusted_player_metrics"
"""
input AdjustedPlayerMetricsVarianceOrderBy {
  athleteId: OrderBy
  metricValue: OrderBy
  plays: OrderBy
  year: OrderBy
}
"""
Boolean expression to filter rows from the table "adjusted_team_metrics". All fields are combined with a logical 'AND'.
"""
input AdjustedTeamMetricsBoolExp {
  _and: [AdjustedTeamMetricsBoolExp!]
  _not: AdjustedTeamMetricsBoolExp
  _or: [AdjustedTeamMetricsBoolExp!]
  epa: NumericComparisonExp
  epaAllowed: NumericComparisonExp
  explosiveness: NumericComparisonExp
  explosivenessAllowed: NumericComparisonExp
  highlightYards: NumericComparisonExp
  highlightYardsAllowed: NumericComparisonExp
  lineYards: NumericComparisonExp
  lineYardsAllowed: NumericComparisonExp
  openFieldYards: NumericComparisonExp
  openFieldYardsAllowed: NumericComparisonExp
  passingDownsSuccess: NumericComparisonExp
  passingDownsSuccessAllowed: NumericComparisonExp
  passingEpa: NumericComparisonExp
  passingEpaAllowed: NumericComparisonExp
  rushingEpa: NumericComparisonExp
  rushingEpaAllowed: NumericComparisonExp
  secondLevelYards: NumericComparisonExp
  secondLevelYardsAllowed: NumericComparisonExp
  standardDownsSuccess: NumericComparisonExp
  standardDownsSuccessAllowed: NumericComparisonExp
  success: NumericComparisonExp
  successAllowed: NumericComparisonExp
  team: currentTeamsBoolExp
  teamId: IntComparisonExp
  year: SmallintComparisonExp
}
"""
Ordering options when selecting data from "adjusted_team_metrics".
"""
input AdjustedTeamMetricsOrderBy {
  epa: OrderBy
  epaAllowed: OrderBy
  explosiveness: OrderBy
  explosivenessAllowed: OrderBy
  highlightYards: OrderBy
  highlightYardsAllowed: OrderBy
  lineYards: OrderBy
  lineYardsAllowed: OrderBy
  openFieldYards: OrderBy
  openFieldYardsAllowed: OrderBy
  passingDownsSuccess: OrderBy
  passingDownsSuccessAllowed: OrderBy
  passingEpa: OrderBy
  passingEpaAllowed: OrderBy
  rushingEpa: OrderBy
  rushingEpaAllowed: OrderBy
  secondLevelYards: OrderBy
  secondLevelYardsAllowed: OrderBy
  standardDownsSuccess: OrderBy
  standardDownsSuccessAllowed: OrderBy
  success: OrderBy
  successAllowed: OrderBy
  team: currentTeamsOrderBy
  teamId: OrderBy
  year: OrderBy
}
input AthleteAggregateBoolExp {
  count: athleteAggregateBoolExpCount
}
"""
order by aggregate values of table "athlete"
"""
input AthleteAggregateOrderBy {
  avg: AthleteAvgOrderBy
  count: OrderBy
  max: AthleteMaxOrderBy
  min: AthleteMinOrderBy
  stddev: AthleteStddevOrderBy
  stddevPop: AthleteStddevPopOrderBy
  stddevSamp: AthleteStddevSampOrderBy
  sum: AthleteSumOrderBy
  varPop: AthleteVarPopOrderBy
  varSamp: AthleteVarSampOrderBy
  variance: AthleteVarianceOrderBy
}
"""
order by avg() on columns of table "athlete"
"""
input AthleteAvgOrderBy {
  height: OrderBy
  hometownId: OrderBy
  id: OrderBy
  jersey: OrderBy
  positionId: OrderBy
  teamId: OrderBy
  weight: OrderBy
}
"""
Boolean expression to filter rows from the table "athlete". All fields are combined with a logical 'AND'.
"""
input AthleteBoolExp {
  _and: [AthleteBoolExp!]
  _not: AthleteBoolExp
  _or: [AthleteBoolExp!]
  adjustedPlayerMetrics: AdjustedPlayerMetricsBoolExp
  adjustedPlayerMetricsAggregate: AdjustedPlayerMetricsAggregateBoolExp
  athleteTeams: AthleteTeamBoolExp
  athleteTeamsAggregate: AthleteTeamAggregateBoolExp
  firstName: StringComparisonExp
  height: SmallintComparisonExp
  hometown: HometownBoolExp
  hometownId: IntComparisonExp
  id: BigintComparisonExp
  jersey: SmallintComparisonExp
  lastName: StringComparisonExp
  name: StringComparisonExp
  position: PositionBoolExp
  positionId: SmallintComparisonExp
  recruits: RecruitBoolExp
  recruitsAggregate: RecruitAggregateBoolExp
  teamId: IntComparisonExp
  weight: SmallintComparisonExp
}
"""
order by max() on columns of table "athlete"
"""
input AthleteMaxOrderBy {
  firstName: OrderBy
  height: OrderBy
  hometownId: OrderBy
  id: OrderBy
  jersey: OrderBy
  lastName: OrderBy
  name: OrderBy
  positionId: OrderBy
  teamId: OrderBy
  weight: OrderBy
}
"""
order by min() on columns of table "athlete"
"""
input AthleteMinOrderBy {
  firstName: OrderBy
  height: OrderBy
  hometownId: OrderBy
  id: OrderBy
  jersey: OrderBy
  lastName: OrderBy
  name: OrderBy
  positionId: OrderBy
  teamId: OrderBy
  weight: OrderBy
}
"""
Ordering options when selecting data from "athlete".
"""
input AthleteOrderBy {
  adjustedPlayerMetricsAggregate: AdjustedPlayerMetricsAggregateOrderBy
  athleteTeamsAggregate: AthleteTeamAggregateOrderBy
  firstName: OrderBy
  height: OrderBy
  hometown: HometownOrderBy
  hometownId: OrderBy
  id: OrderBy
  jersey: OrderBy
  lastName: OrderBy
  name: OrderBy
  position: PositionOrderBy
  positionId: OrderBy
  recruitsAggregate: RecruitAggregateOrderBy
  teamId: OrderBy
  weight: OrderBy
}
"""
order by stddev() on columns of table "athlete"
"""
input AthleteStddevOrderBy {
  height: OrderBy
  hometownId: OrderBy
  id: OrderBy
  jersey: OrderBy
  positionId: OrderBy
  teamId: OrderBy
  weight: OrderBy
}
"""
order by stddevPop() on columns of table "athlete"
"""
input AthleteStddevPopOrderBy {
  height: OrderBy
  hometownId: OrderBy
  id: OrderBy
  jersey: OrderBy
  positionId: OrderBy
  teamId: OrderBy
  weight: OrderBy
}
"""
order by stddevSamp() on columns of table "athlete"
"""
input AthleteStddevSampOrderBy {
  height: OrderBy
  hometownId: OrderBy
  id: OrderBy
  jersey: OrderBy
  positionId: OrderBy
  teamId: OrderBy
  weight: OrderBy
}
"""
order by sum() on columns of table "athlete"
"""
input AthleteSumOrderBy {
  height: OrderBy
  hometownId: OrderBy
  id: OrderBy
  jersey: OrderBy
  positionId: OrderBy
  teamId: OrderBy
  weight: OrderBy
}
input AthleteTeamAggregateBoolExp {
  count: athleteTeamAggregateBoolExpCount
}
"""
order by aggregate values of table "athlete_team"
"""
input AthleteTeamAggregateOrderBy {
  avg: AthleteTeamAvgOrderBy
  count: OrderBy
  max: AthleteTeamMaxOrderBy
  min: AthleteTeamMinOrderBy
  stddev: AthleteTeamStddevOrderBy
  stddevPop: AthleteTeamStddevPopOrderBy
  stddevSamp: AthleteTeamStddevSampOrderBy
  sum: AthleteTeamSumOrderBy
  varPop: AthleteTeamVarPopOrderBy
  varSamp: AthleteTeamVarSampOrderBy
  variance: AthleteTeamVarianceOrderBy
}
"""
order by avg() on columns of table "athlete_team"
"""
input AthleteTeamAvgOrderBy {
  athleteId: OrderBy
  endYear: OrderBy
  startYear: OrderBy
  teamId: OrderBy
}
"""
Boolean expression to filter rows from the table "athlete_team". All fields are combined with a logical 'AND'.
"""
input AthleteTeamBoolExp {
  _and: [AthleteTeamBoolExp!]
  _not: AthleteTeamBoolExp
  _or: [AthleteTeamBoolExp!]
  athlete: AthleteBoolExp
  athleteId: BigintComparisonExp
  endYear: SmallintComparisonExp
  startYear: SmallintComparisonExp
  team: historicalTeamBoolExp
  teamId: IntComparisonExp
}
"""
order by max() on columns of table "athlete_team"
"""
input AthleteTeamMaxOrderBy {
  athleteId: OrderBy
  endYear: OrderBy
  startYear: OrderBy
  teamId: OrderBy
}
"""
order by min() on columns of table "athlete_team"
"""
input AthleteTeamMinOrderBy {
  athleteId: OrderBy
  endYear: OrderBy
  startYear: OrderBy
  teamId: OrderBy
}
"""
Ordering options when selecting data from "athlete_team".
"""
input AthleteTeamOrderBy {
  athlete: AthleteOrderBy
  athleteId: OrderBy
  endYear: OrderBy
  startYear: OrderBy
  team: historicalTeamOrderBy
  teamId: OrderBy
}
"""
order by stddev() on columns of table "athlete_team"
"""
input AthleteTeamStddevOrderBy {
  athleteId: OrderBy
  endYear: OrderBy
  startYear: OrderBy
  teamId: OrderBy
}
"""
order by stddevPop() on columns of table "athlete_team"
"""
input AthleteTeamStddevPopOrderBy {
  athleteId: OrderBy
  endYear: OrderBy
  startYear: OrderBy
  teamId: OrderBy
}
"""
order by stddevSamp() on columns of table "athlete_team"
"""
input AthleteTeamStddevSampOrderBy {
  athleteId: OrderBy
  endYear: OrderBy
  startYear: OrderBy
  teamId: OrderBy
}
"""
order by sum() on columns of table "athlete_team"
"""
input AthleteTeamSumOrderBy {
  athleteId: OrderBy
  endYear: OrderBy
  startYear: OrderBy
  teamId: OrderBy
}
"""
order by varPop() on columns of table "athlete_team"
"""
input AthleteTeamVarPopOrderBy {
  athleteId: OrderBy
  endYear: OrderBy
  startYear: OrderBy
  teamId: OrderBy
}
"""
order by varSamp() on columns of table "athlete_team"
"""
input AthleteTeamVarSampOrderBy {
  athleteId: OrderBy
  endYear: OrderBy
  startYear: OrderBy
  teamId: OrderBy
}
"""
order by variance() on columns of table "athlete_team"
"""
input AthleteTeamVarianceOrderBy {
  athleteId: OrderBy
  endYear: OrderBy
  startYear: OrderBy
  teamId: OrderBy
}
"""
order by varPop() on columns of table "athlete"
"""
input AthleteVarPopOrderBy {
  height: OrderBy
  hometownId: OrderBy
  id: OrderBy
  jersey: OrderBy
  positionId: OrderBy
  teamId: OrderBy
  weight: OrderBy
}
"""
order by varSamp() on columns of table "athlete"
"""
input AthleteVarSampOrderBy {
  height: OrderBy
  hometownId: OrderBy
  id: OrderBy
  jersey: OrderBy
  positionId: OrderBy
  teamId: OrderBy
  weight: OrderBy
}
"""
order by variance() on columns of table "athlete"
"""
input AthleteVarianceOrderBy {
  height: OrderBy
  hometownId: OrderBy
  id: OrderBy
  jersey: OrderBy
  positionId: OrderBy
  teamId: OrderBy
  weight: OrderBy
}
"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input BigintComparisonExp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _isNull: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}
"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input BooleanComparisonExp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _isNull: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}
"""
Boolean expression to filter rows from the table "calendar". All fields are combined with a logical 'AND'.
"""
input CalendarBoolExp {
  _and: [CalendarBoolExp!]
  _not: CalendarBoolExp
  _or: [CalendarBoolExp!]
  endDate: TimestampComparisonExp
  seasonType: SeasonTypeComparisonExp
  startDate: TimestampComparisonExp
  week: SmallintComparisonExp
  year: SmallintComparisonExp
}
"""
Ordering options when selecting data from "calendar".
"""
input CalendarOrderBy {
  endDate: OrderBy
  seasonType: OrderBy
  startDate: OrderBy
  week: OrderBy
  year: OrderBy
}
"""
Boolean expression to filter rows from the table "coach". All fields are combined with a logical 'AND'.
"""
input CoachBoolExp {
  _and: [CoachBoolExp!]
  _not: CoachBoolExp
  _or: [CoachBoolExp!]
  firstName: StringComparisonExp
  id: IntComparisonExp
  lastName: StringComparisonExp
  seasons: CoachSeasonBoolExp
  seasonsAggregate: CoachSeasonAggregateBoolExp
}
"""
Ordering options when selecting data from "coach".
"""
input CoachOrderBy {
  firstName: OrderBy
  id: OrderBy
  lastName: OrderBy
  seasonsAggregate: CoachSeasonAggregateOrderBy
}
input CoachSeasonAggregateBoolExp {
  count: coachSeasonAggregateBoolExpCount
}
"""
order by aggregate values of table "coach_season"
"""
input CoachSeasonAggregateOrderBy {
  avg: CoachSeasonAvgOrderBy
  count: OrderBy
  max: CoachSeasonMaxOrderBy
  min: CoachSeasonMinOrderBy
  stddev: CoachSeasonStddevOrderBy
  stddevPop: CoachSeasonStddevPopOrderBy
  stddevSamp: CoachSeasonStddevSampOrderBy
  sum: CoachSeasonSumOrderBy
  varPop: CoachSeasonVarPopOrderBy
  varSamp: CoachSeasonVarSampOrderBy
  variance: CoachSeasonVarianceOrderBy
}
"""
order by avg() on columns of table "coach_season"
"""
input CoachSeasonAvgOrderBy {
  games: OrderBy
  losses: OrderBy
  postseasonRank: OrderBy
  preseasonRank: OrderBy
  ties: OrderBy
  wins: OrderBy
  year: OrderBy
}
"""
Boolean expression to filter rows from the table "coach_season". All fields are combined with a logical 'AND'.
"""
input CoachSeasonBoolExp {
  _and: [CoachSeasonBoolExp!]
  _not: CoachSeasonBoolExp
  _or: [CoachSeasonBoolExp!]
  coach: CoachBoolExp
  games: SmallintComparisonExp
  losses: SmallintComparisonExp
  postseasonRank: SmallintComparisonExp
  preseasonRank: SmallintComparisonExp
  team: currentTeamsBoolExp
  ties: SmallintComparisonExp
  wins: SmallintComparisonExp
  year: SmallintComparisonExp
}
"""
order by max() on columns of table "coach_season"
"""
input CoachSeasonMaxOrderBy {
  games: OrderBy
  losses: OrderBy
  postseasonRank: OrderBy
  preseasonRank: OrderBy
  ties: OrderBy
  wins: OrderBy
  year: OrderBy
}
"""
order by min() on columns of table "coach_season"
"""
input CoachSeasonMinOrderBy {
  games: OrderBy
  losses: OrderBy
  postseasonRank: OrderBy
  preseasonRank: OrderBy
  ties: OrderBy
  wins: OrderBy
  year: OrderBy
}
"""
Ordering options when selecting data from "coach_season".
"""
input CoachSeasonOrderBy {
  coach: CoachOrderBy
  games: OrderBy
  losses: OrderBy
  postseasonRank: OrderBy
  preseasonRank: OrderBy
  team: currentTeamsOrderBy
  ties: OrderBy
  wins: OrderBy
  year: OrderBy
}
"""
order by stddev() on columns of table "coach_season"
"""
input CoachSeasonStddevOrderBy {
  games: OrderBy
  losses: OrderBy
  postseasonRank: OrderBy
  preseasonRank: OrderBy
  ties: OrderBy
  wins: OrderBy
  year: OrderBy
}
"""
order by stddevPop() on columns of table "coach_season"
"""
input CoachSeasonStddevPopOrderBy {
  games: OrderBy
  losses: OrderBy
  postseasonRank: OrderBy
  preseasonRank: OrderBy
  ties: OrderBy
  wins: OrderBy
  year: OrderBy
}
"""
order by stddevSamp() on columns of table "coach_season"
"""
input CoachSeasonStddevSampOrderBy {
  games: OrderBy
  losses: OrderBy
  postseasonRank: OrderBy
  preseasonRank: OrderBy
  ties: OrderBy
  wins: OrderBy
  year: OrderBy
}
"""
order by sum() on columns of table "coach_season"
"""
input CoachSeasonSumOrderBy {
  games: OrderBy
  losses: OrderBy
  postseasonRank: OrderBy
  preseasonRank: OrderBy
  ties: OrderBy
  wins: OrderBy
  year: OrderBy
}
"""
order by varPop() on columns of table "coach_season"
"""
input CoachSeasonVarPopOrderBy {
  games: OrderBy
  losses: OrderBy
  postseasonRank: OrderBy
  preseasonRank: OrderBy
  ties: OrderBy
  wins: OrderBy
  year: OrderBy
}
"""
order by varSamp() on columns of table "coach_season"
"""
input CoachSeasonVarSampOrderBy {
  games: OrderBy
  losses: OrderBy
  postseasonRank: OrderBy
  preseasonRank: OrderBy
  ties: OrderBy
  wins: OrderBy
  year: OrderBy
}
"""
order by variance() on columns of table "coach_season"
"""
input CoachSeasonVarianceOrderBy {
  games: OrderBy
  losses: OrderBy
  postseasonRank: OrderBy
  preseasonRank: OrderBy
  ties: OrderBy
  wins: OrderBy
  year: OrderBy
}
"""
Boolean expression to filter rows from the table "conference". All fields are combined with a logical 'AND'.
"""
input ConferenceBoolExp {
  _and: [ConferenceBoolExp!]
  _not: ConferenceBoolExp
  _or: [ConferenceBoolExp!]
  abbreviation: StringComparisonExp
  division: DivisionComparisonExp
  id: SmallintComparisonExp
  name: StringComparisonExp
  shortName: StringComparisonExp
  srName: StringComparisonExp
}
"""
Ordering options when selecting data from "conference".
"""
input ConferenceOrderBy {
  abbreviation: OrderBy
  division: OrderBy
  id: OrderBy
  name: OrderBy
  shortName: OrderBy
  srName: OrderBy
}
"""
Boolean expression to compare columns of type "division". All fields are combined with logical 'AND'.
"""
input DivisionComparisonExp {
  _eq: division
  _gt: division
  _gte: division
  _in: [division!]
  _isNull: Boolean
  _lt: division
  _lte: division
  _neq: division
  _nin: [division!]
}
input DraftPicksAggregateBoolExp {
  count: draftPicksAggregateBoolExpCount
}
"""
order by aggregate values of table "draft_picks"
"""
input DraftPicksAggregateOrderBy {
  avg: DraftPicksAvgOrderBy
  count: OrderBy
  max: DraftPicksMaxOrderBy
  min: DraftPicksMinOrderBy
  stddev: DraftPicksStddevOrderBy
  stddevPop: DraftPicksStddevPopOrderBy
  stddevSamp: DraftPicksStddevSampOrderBy
  sum: DraftPicksSumOrderBy
  varPop: DraftPicksVarPopOrderBy
  varSamp: DraftPicksVarSampOrderBy
  variance: DraftPicksVarianceOrderBy
}
"""
order by avg() on columns of table "draft_picks"
"""
input DraftPicksAvgOrderBy {
  collegeId: OrderBy
  collegeTeamId: OrderBy
  grade: OrderBy
  height: OrderBy
  nflTeamId: OrderBy
  overall: OrderBy
  overallRank: OrderBy
  pick: OrderBy
  positionId: OrderBy
  positionRank: OrderBy
  round: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
Boolean expression to filter rows from the table "draft_picks". All fields are combined with a logical 'AND'.
"""
input DraftPicksBoolExp {
  _and: [DraftPicksBoolExp!]
  _not: DraftPicksBoolExp
  _or: [DraftPicksBoolExp!]
  collegeAthleteRecord: AthleteBoolExp
  collegeId: IntComparisonExp
  collegeTeam: historicalTeamBoolExp
  collegeTeamId: IntComparisonExp
  draftTeam: DraftTeamBoolExp
  grade: SmallintComparisonExp
  height: SmallintComparisonExp
  name: StringComparisonExp
  nflTeamId: SmallintComparisonExp
  overall: SmallintComparisonExp
  overallRank: SmallintComparisonExp
  pick: SmallintComparisonExp
  position: DraftPositionBoolExp
  positionId: SmallintComparisonExp
  positionRank: SmallintComparisonExp
  round: SmallintComparisonExp
  weight: SmallintComparisonExp
  year: SmallintComparisonExp
}
"""
order by max() on columns of table "draft_picks"
"""
input DraftPicksMaxOrderBy {
  collegeId: OrderBy
  collegeTeamId: OrderBy
  grade: OrderBy
  height: OrderBy
  name: OrderBy
  nflTeamId: OrderBy
  overall: OrderBy
  overallRank: OrderBy
  pick: OrderBy
  positionId: OrderBy
  positionRank: OrderBy
  round: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
order by min() on columns of table "draft_picks"
"""
input DraftPicksMinOrderBy {
  collegeId: OrderBy
  collegeTeamId: OrderBy
  grade: OrderBy
  height: OrderBy
  name: OrderBy
  nflTeamId: OrderBy
  overall: OrderBy
  overallRank: OrderBy
  pick: OrderBy
  positionId: OrderBy
  positionRank: OrderBy
  round: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
Ordering options when selecting data from "draft_picks".
"""
input DraftPicksOrderBy {
  collegeAthleteRecord: AthleteOrderBy
  collegeId: OrderBy
  collegeTeam: historicalTeamOrderBy
  collegeTeamId: OrderBy
  draftTeam: DraftTeamOrderBy
  grade: OrderBy
  height: OrderBy
  name: OrderBy
  nflTeamId: OrderBy
  overall: OrderBy
  overallRank: OrderBy
  pick: OrderBy
  position: DraftPositionOrderBy
  positionId: OrderBy
  positionRank: OrderBy
  round: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
order by stddev() on columns of table "draft_picks"
"""
input DraftPicksStddevOrderBy {
  collegeId: OrderBy
  collegeTeamId: OrderBy
  grade: OrderBy
  height: OrderBy
  nflTeamId: OrderBy
  overall: OrderBy
  overallRank: OrderBy
  pick: OrderBy
  positionId: OrderBy
  positionRank: OrderBy
  round: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
order by stddevPop() on columns of table "draft_picks"
"""
input DraftPicksStddevPopOrderBy {
  collegeId: OrderBy
  collegeTeamId: OrderBy
  grade: OrderBy
  height: OrderBy
  nflTeamId: OrderBy
  overall: OrderBy
  overallRank: OrderBy
  pick: OrderBy
  positionId: OrderBy
  positionRank: OrderBy
  round: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
order by stddevSamp() on columns of table "draft_picks"
"""
input DraftPicksStddevSampOrderBy {
  collegeId: OrderBy
  collegeTeamId: OrderBy
  grade: OrderBy
  height: OrderBy
  nflTeamId: OrderBy
  overall: OrderBy
  overallRank: OrderBy
  pick: OrderBy
  positionId: OrderBy
  positionRank: OrderBy
  round: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
order by sum() on columns of table "draft_picks"
"""
input DraftPicksSumOrderBy {
  collegeId: OrderBy
  collegeTeamId: OrderBy
  grade: OrderBy
  height: OrderBy
  nflTeamId: OrderBy
  overall: OrderBy
  overallRank: OrderBy
  pick: OrderBy
  positionId: OrderBy
  positionRank: OrderBy
  round: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
order by varPop() on columns of table "draft_picks"
"""
input DraftPicksVarPopOrderBy {
  collegeId: OrderBy
  collegeTeamId: OrderBy
  grade: OrderBy
  height: OrderBy
  nflTeamId: OrderBy
  overall: OrderBy
  overallRank: OrderBy
  pick: OrderBy
  positionId: OrderBy
  positionRank: OrderBy
  round: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
order by varSamp() on columns of table "draft_picks"
"""
input DraftPicksVarSampOrderBy {
  collegeId: OrderBy
  collegeTeamId: OrderBy
  grade: OrderBy
  height: OrderBy
  nflTeamId: OrderBy
  overall: OrderBy
  overallRank: OrderBy
  pick: OrderBy
  positionId: OrderBy
  positionRank: OrderBy
  round: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
order by variance() on columns of table "draft_picks"
"""
input DraftPicksVarianceOrderBy {
  collegeId: OrderBy
  collegeTeamId: OrderBy
  grade: OrderBy
  height: OrderBy
  nflTeamId: OrderBy
  overall: OrderBy
  overallRank: OrderBy
  pick: OrderBy
  positionId: OrderBy
  positionRank: OrderBy
  round: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
Boolean expression to filter rows from the table "draft_position". All fields are combined with a logical 'AND'.
"""
input DraftPositionBoolExp {
  _and: [DraftPositionBoolExp!]
  _not: DraftPositionBoolExp
  _or: [DraftPositionBoolExp!]
  abbreviation: StringComparisonExp
  id: SmallintComparisonExp
  name: StringComparisonExp
}
"""
Ordering options when selecting data from "draft_position".
"""
input DraftPositionOrderBy {
  abbreviation: OrderBy
  id: OrderBy
  name: OrderBy
}
"""
Boolean expression to filter rows from the table "draft_team". All fields are combined with a logical 'AND'.
"""
input DraftTeamBoolExp {
  _and: [DraftTeamBoolExp!]
  _not: DraftTeamBoolExp
  _or: [DraftTeamBoolExp!]
  displayName: StringComparisonExp
  id: SmallintComparisonExp
  location: StringComparisonExp
  logo: StringComparisonExp
  mascot: StringComparisonExp
  nickname: StringComparisonExp
  picks: DraftPicksBoolExp
  picksAggregate: DraftPicksAggregateBoolExp
  shortDisplayName: StringComparisonExp
}
"""
Ordering options when selecting data from "draft_team".
"""
input DraftTeamOrderBy {
  displayName: OrderBy
  id: OrderBy
  location: OrderBy
  logo: OrderBy
  mascot: OrderBy
  nickname: OrderBy
  picksAggregate: DraftPicksAggregateOrderBy
  shortDisplayName: OrderBy
}
"""
Boolean expression to compare columns of type "Float". All fields are combined with logical 'AND'.
"""
input FloatComparisonExp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _isNull: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}
input GameLinesAggregateBoolExp {
  count: gameLinesAggregateBoolExpCount
}
"""
order by aggregate values of table "game_lines"
"""
input GameLinesAggregateOrderBy {
  avg: GameLinesAvgOrderBy
  count: OrderBy
  max: GameLinesMaxOrderBy
  min: GameLinesMinOrderBy
  stddev: GameLinesStddevOrderBy
  stddevPop: GameLinesStddevPopOrderBy
  stddevSamp: GameLinesStddevSampOrderBy
  sum: GameLinesSumOrderBy
  varPop: GameLinesVarPopOrderBy
  varSamp: GameLinesVarSampOrderBy
  variance: GameLinesVarianceOrderBy
}
"""
order by avg() on columns of table "game_lines"
"""
input GameLinesAvgOrderBy {
  gameId: OrderBy
  linesProviderId: OrderBy
  moneylineAway: OrderBy
  moneylineHome: OrderBy
  overUnder: OrderBy
  overUnderOpen: OrderBy
  spread: OrderBy
  spreadOpen: OrderBy
}
"""
Boolean expression to filter rows from the table "game_lines". All fields are combined with a logical 'AND'.
"""
input GameLinesBoolExp {
  _and: [GameLinesBoolExp!]
  _not: GameLinesBoolExp
  _or: [GameLinesBoolExp!]
  gameId: IntComparisonExp
  linesProviderId: IntComparisonExp
  moneylineAway: IntComparisonExp
  moneylineHome: IntComparisonExp
  overUnder: NumericComparisonExp
  overUnderOpen: NumericComparisonExp
  provider: LinesProviderBoolExp
  spread: NumericComparisonExp
  spreadOpen: NumericComparisonExp
}
"""
order by max() on columns of table "game_lines"
"""
input GameLinesMaxOrderBy {
  gameId: OrderBy
  linesProviderId: OrderBy
  moneylineAway: OrderBy
  moneylineHome: OrderBy
  overUnder: OrderBy
  overUnderOpen: OrderBy
  spread: OrderBy
  spreadOpen: OrderBy
}
"""
order by min() on columns of table "game_lines"
"""
input GameLinesMinOrderBy {
  gameId: OrderBy
  linesProviderId: OrderBy
  moneylineAway: OrderBy
  moneylineHome: OrderBy
  overUnder: OrderBy
  overUnderOpen: OrderBy
  spread: OrderBy
  spreadOpen: OrderBy
}
"""
Ordering options when selecting data from "game_lines".
"""
input GameLinesOrderBy {
  gameId: OrderBy
  linesProviderId: OrderBy
  moneylineAway: OrderBy
  moneylineHome: OrderBy
  overUnder: OrderBy
  overUnderOpen: OrderBy
  provider: LinesProviderOrderBy
  spread: OrderBy
  spreadOpen: OrderBy
}
"""
order by stddev() on columns of table "game_lines"
"""
input GameLinesStddevOrderBy {
  gameId: OrderBy
  linesProviderId: OrderBy
  moneylineAway: OrderBy
  moneylineHome: OrderBy
  overUnder: OrderBy
  overUnderOpen: OrderBy
  spread: OrderBy
  spreadOpen: OrderBy
}
"""
order by stddevPop() on columns of table "game_lines"
"""
input GameLinesStddevPopOrderBy {
  gameId: OrderBy
  linesProviderId: OrderBy
  moneylineAway: OrderBy
  moneylineHome: OrderBy
  overUnder: OrderBy
  overUnderOpen: OrderBy
  spread: OrderBy
  spreadOpen: OrderBy
}
"""
order by stddevSamp() on columns of table "game_lines"
"""
input GameLinesStddevSampOrderBy {
  gameId: OrderBy
  linesProviderId: OrderBy
  moneylineAway: OrderBy
  moneylineHome: OrderBy
  overUnder: OrderBy
  overUnderOpen: OrderBy
  spread: OrderBy
  spreadOpen: OrderBy
}
"""
order by sum() on columns of table "game_lines"
"""
input GameLinesSumOrderBy {
  gameId: OrderBy
  linesProviderId: OrderBy
  moneylineAway: OrderBy
  moneylineHome: OrderBy
  overUnder: OrderBy
  overUnderOpen: OrderBy
  spread: OrderBy
  spreadOpen: OrderBy
}
"""
order by varPop() on columns of table "game_lines"
"""
input GameLinesVarPopOrderBy {
  gameId: OrderBy
  linesProviderId: OrderBy
  moneylineAway: OrderBy
  moneylineHome: OrderBy
  overUnder: OrderBy
  overUnderOpen: OrderBy
  spread: OrderBy
  spreadOpen: OrderBy
}
"""
order by varSamp() on columns of table "game_lines"
"""
input GameLinesVarSampOrderBy {
  gameId: OrderBy
  linesProviderId: OrderBy
  moneylineAway: OrderBy
  moneylineHome: OrderBy
  overUnder: OrderBy
  overUnderOpen: OrderBy
  spread: OrderBy
  spreadOpen: OrderBy
}
"""
order by variance() on columns of table "game_lines"
"""
input GameLinesVarianceOrderBy {
  gameId: OrderBy
  linesProviderId: OrderBy
  moneylineAway: OrderBy
  moneylineHome: OrderBy
  overUnder: OrderBy
  overUnderOpen: OrderBy
  spread: OrderBy
  spreadOpen: OrderBy
}
"""
order by aggregate values of table "game_media"
"""
input GameMediaAggregateOrderBy {
  count: OrderBy
  max: GameMediaMaxOrderBy
  min: GameMediaMinOrderBy
}
"""
Boolean expression to filter rows from the table "game_media". All fields are combined with a logical 'AND'.
"""
input GameMediaBoolExp {
  _and: [GameMediaBoolExp!]
  _not: GameMediaBoolExp
  _or: [GameMediaBoolExp!]
  mediaType: MediaTypeComparisonExp
  name: StringComparisonExp
}
"""
order by max() on columns of table "game_media"
"""
input GameMediaMaxOrderBy {
  mediaType: OrderBy
  name: OrderBy
}
"""
order by min() on columns of table "game_media"
"""
input GameMediaMinOrderBy {
  mediaType: OrderBy
  name: OrderBy
}
"""
Ordering options when selecting data from "game_media".
"""
input GameMediaOrderBy {
  mediaType: OrderBy
  name: OrderBy
}
input GamePlayerStatAggregateBoolExp {
  count: gamePlayerStatAggregateBoolExpCount
}
"""
order by aggregate values of table "game_player_stat"
"""
input GamePlayerStatAggregateOrderBy {
  avg: GamePlayerStatAvgOrderBy
  count: OrderBy
  max: GamePlayerStatMaxOrderBy
  min: GamePlayerStatMinOrderBy
  stddev: GamePlayerStatStddevOrderBy
  stddevPop: GamePlayerStatStddevPopOrderBy
  stddevSamp: GamePlayerStatStddevSampOrderBy
  sum: GamePlayerStatSumOrderBy
  varPop: GamePlayerStatVarPopOrderBy
  varSamp: GamePlayerStatVarSampOrderBy
  variance: GamePlayerStatVarianceOrderBy
}
"""
order by avg() on columns of table "game_player_stat"
"""
input GamePlayerStatAvgOrderBy {
  athleteId: OrderBy
  gameTeamId: OrderBy
  id: OrderBy
}
"""
Boolean expression to filter rows from the table "game_player_stat". All fields are combined with a logical 'AND'.
"""
input GamePlayerStatBoolExp {
  _and: [GamePlayerStatBoolExp!]
  _not: GamePlayerStatBoolExp
  _or: [GamePlayerStatBoolExp!]
  athlete: AthleteBoolExp
  athleteId: BigintComparisonExp
  gameTeam: GameTeamBoolExp
  gameTeamId: BigintComparisonExp
  id: BigintComparisonExp
  playerStatCategory: PlayerStatCategoryBoolExp
  playerStatType: PlayerStatTypeBoolExp
  stat: StringComparisonExp
}
"""
order by max() on columns of table "game_player_stat"
"""
input GamePlayerStatMaxOrderBy {
  athleteId: OrderBy
  gameTeamId: OrderBy
  id: OrderBy
  stat: OrderBy
}
"""
order by min() on columns of table "game_player_stat"
"""
input GamePlayerStatMinOrderBy {
  athleteId: OrderBy
  gameTeamId: OrderBy
  id: OrderBy
  stat: OrderBy
}
"""
Ordering options when selecting data from "game_player_stat".
"""
input GamePlayerStatOrderBy {
  athlete: AthleteOrderBy
  athleteId: OrderBy
  gameTeam: GameTeamOrderBy
  gameTeamId: OrderBy
  id: OrderBy
  playerStatCategory: PlayerStatCategoryOrderBy
  playerStatType: PlayerStatTypeOrderBy
  stat: OrderBy
}
"""
order by stddev() on columns of table "game_player_stat"
"""
input GamePlayerStatStddevOrderBy {
  athleteId: OrderBy
  gameTeamId: OrderBy
  id: OrderBy
}
"""
order by stddevPop() on columns of table "game_player_stat"
"""
input GamePlayerStatStddevPopOrderBy {
  athleteId: OrderBy
  gameTeamId: OrderBy
  id: OrderBy
}
"""
order by stddevSamp() on columns of table "game_player_stat"
"""
input GamePlayerStatStddevSampOrderBy {
  athleteId: OrderBy
  gameTeamId: OrderBy
  id: OrderBy
}
"""
order by sum() on columns of table "game_player_stat"
"""
input GamePlayerStatSumOrderBy {
  athleteId: OrderBy
  gameTeamId: OrderBy
  id: OrderBy
}
"""
order by varPop() on columns of table "game_player_stat"
"""
input GamePlayerStatVarPopOrderBy {
  athleteId: OrderBy
  gameTeamId: OrderBy
  id: OrderBy
}
"""
order by varSamp() on columns of table "game_player_stat"
"""
input GamePlayerStatVarSampOrderBy {
  athleteId: OrderBy
  gameTeamId: OrderBy
  id: OrderBy
}
"""
order by variance() on columns of table "game_player_stat"
"""
input GamePlayerStatVarianceOrderBy {
  athleteId: OrderBy
  gameTeamId: OrderBy
  id: OrderBy
}
"""
Boolean expression to compare columns of type "game_status". All fields are combined with logical 'AND'.
"""
input GameStatusComparisonExp {
  _eq: game_status
  _gt: game_status
  _gte: game_status
  _in: [game_status!]
  _isNull: Boolean
  _lt: game_status
  _lte: game_status
  _neq: game_status
  _nin: [game_status!]
}
"""
Boolean expression to filter rows from the table "game_team". All fields are combined with a logical 'AND'.
"""
input GameTeamBoolExp {
  _and: [GameTeamBoolExp!]
  _not: GameTeamBoolExp
  _or: [GameTeamBoolExp!]
  endElo: IntComparisonExp
  game: gameBoolExp
  gameId: IntComparisonExp
  gamePlayerStats: GamePlayerStatBoolExp
  gamePlayerStatsAggregate: GamePlayerStatAggregateBoolExp
  homeAway: HomeAwayComparisonExp
  lineScores: SmallintArrayComparisonExp
  points: SmallintComparisonExp
  startElo: IntComparisonExp
  teamId: IntComparisonExp
  winProb: NumericComparisonExp
}
"""
Ordering options when selecting data from "game_team".
"""
input GameTeamOrderBy {
  endElo: OrderBy
  game: gameOrderBy
  gameId: OrderBy
  gamePlayerStatsAggregate: GamePlayerStatAggregateOrderBy
  homeAway: OrderBy
  lineScores: OrderBy
  points: OrderBy
  startElo: OrderBy
  teamId: OrderBy
  winProb: OrderBy
}
"""
Boolean expression to filter rows from the table "game_weather". All fields are combined with a logical 'AND'.
"""
input GameWeatherBoolExp {
  _and: [GameWeatherBoolExp!]
  _not: GameWeatherBoolExp
  _or: [GameWeatherBoolExp!]
  condition: WeatherConditionBoolExp
  dewpoint: NumericComparisonExp
  gameId: IntComparisonExp
  humidity: NumericComparisonExp
  precipitation: NumericComparisonExp
  pressure: NumericComparisonExp
  snowfall: NumericComparisonExp
  temperature: NumericComparisonExp
  weatherConditionCode: SmallintComparisonExp
  windDirection: NumericComparisonExp
  windGust: NumericComparisonExp
  windSpeed: NumericComparisonExp
}
"""
Ordering options when selecting data from "game_weather".
"""
input GameWeatherOrderBy {
  condition: WeatherConditionOrderBy
  dewpoint: OrderBy
  gameId: OrderBy
  humidity: OrderBy
  precipitation: OrderBy
  pressure: OrderBy
  snowfall: OrderBy
  temperature: OrderBy
  weatherConditionCode: OrderBy
  windDirection: OrderBy
  windGust: OrderBy
  windSpeed: OrderBy
}
"""
Boolean expression to compare columns of type "home_away". All fields are combined with logical 'AND'.
"""
input HomeAwayComparisonExp {
  _eq: home_away
  _gt: home_away
  _gte: home_away
  _in: [home_away!]
  _isNull: Boolean
  _lt: home_away
  _lte: home_away
  _neq: home_away
  _nin: [home_away!]
}
"""
Boolean expression to filter rows from the table "hometown". All fields are combined with a logical 'AND'.
"""
input HometownBoolExp {
  _and: [HometownBoolExp!]
  _not: HometownBoolExp
  _or: [HometownBoolExp!]
  athletes: AthleteBoolExp
  athletesAggregate: AthleteAggregateBoolExp
  city: StringComparisonExp
  country: StringComparisonExp
  countyFips: StringComparisonExp
  latitude: NumericComparisonExp
  longitude: NumericComparisonExp
  recruits: RecruitBoolExp
  recruitsAggregate: RecruitAggregateBoolExp
  state: StringComparisonExp
}
"""
Ordering options when selecting data from "hometown".
"""
input HometownOrderBy {
  athletesAggregate: AthleteAggregateOrderBy
  city: OrderBy
  country: OrderBy
  countyFips: OrderBy
  latitude: OrderBy
  longitude: OrderBy
  recruitsAggregate: RecruitAggregateOrderBy
  state: OrderBy
}
"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input IntComparisonExp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _isNull: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}
"""
Boolean expression to filter rows from the table "lines_provider". All fields are combined with a logical 'AND'.
"""
input LinesProviderBoolExp {
  _and: [LinesProviderBoolExp!]
  _not: LinesProviderBoolExp
  _or: [LinesProviderBoolExp!]
  id: IntComparisonExp
  name: StringComparisonExp
}
"""
Ordering options when selecting data from "lines_provider".
"""
input LinesProviderOrderBy {
  id: OrderBy
  name: OrderBy
}
"""
Boolean expression to compare columns of type "media_type". All fields are combined with logical 'AND'.
"""
input MediaTypeComparisonExp {
  _eq: media_type
  _gt: media_type
  _gte: media_type
  _in: [media_type!]
  _isNull: Boolean
  _lt: media_type
  _lte: media_type
  _neq: media_type
  _nin: [media_type!]
}
"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input NumericComparisonExp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _isNull: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}
"""
Boolean expression to compare columns of type "player_adjusted_metric_type". All fields are combined with logical 'AND'.
"""
input PlayerAdjustedMetricTypeComparisonExp {
  _eq: player_adjusted_metric_type
  _gt: player_adjusted_metric_type
  _gte: player_adjusted_metric_type
  _in: [player_adjusted_metric_type!]
  _isNull: Boolean
  _lt: player_adjusted_metric_type
  _lte: player_adjusted_metric_type
  _neq: player_adjusted_metric_type
  _nin: [player_adjusted_metric_type!]
}
"""
Boolean expression to filter rows from the table "player_stat_category". All fields are combined with a logical 'AND'.
"""
input PlayerStatCategoryBoolExp {
  _and: [PlayerStatCategoryBoolExp!]
  _not: PlayerStatCategoryBoolExp
  _or: [PlayerStatCategoryBoolExp!]
  gamePlayerStats: GamePlayerStatBoolExp
  gamePlayerStatsAggregate: GamePlayerStatAggregateBoolExp
  name: StringComparisonExp
}
"""
Ordering options when selecting data from "player_stat_category".
"""
input PlayerStatCategoryOrderBy {
  gamePlayerStatsAggregate: GamePlayerStatAggregateOrderBy
  name: OrderBy
}
"""
Boolean expression to filter rows from the table "player_stat_type". All fields are combined with a logical 'AND'.
"""
input PlayerStatTypeBoolExp {
  _and: [PlayerStatTypeBoolExp!]
  _not: PlayerStatTypeBoolExp
  _or: [PlayerStatTypeBoolExp!]
  name: StringComparisonExp
}
"""
Ordering options when selecting data from "player_stat_type".
"""
input PlayerStatTypeOrderBy {
  name: OrderBy
}
"""
order by aggregate values of table "poll"
"""
input PollAggregateOrderBy {
  avg: PollAvgOrderBy
  count: OrderBy
  max: PollMaxOrderBy
  min: PollMinOrderBy
  stddev: PollStddevOrderBy
  stddevPop: PollStddevPopOrderBy
  stddevSamp: PollStddevSampOrderBy
  sum: PollSumOrderBy
  varPop: PollVarPopOrderBy
  varSamp: PollVarSampOrderBy
  variance: PollVarianceOrderBy
}
"""
order by avg() on columns of table "poll"
"""
input PollAvgOrderBy {
  season: OrderBy
  week: OrderBy
}
"""
Boolean expression to filter rows from the table "poll". All fields are combined with a logical 'AND'.
"""
input PollBoolExp {
  _and: [PollBoolExp!]
  _not: PollBoolExp
  _or: [PollBoolExp!]
  pollType: PollTypeBoolExp
  rankings: PollRankBoolExp
  season: IntComparisonExp
  seasonType: SeasonTypeComparisonExp
  week: SmallintComparisonExp
}
"""
order by max() on columns of table "poll"
"""
input PollMaxOrderBy {
  season: OrderBy
  seasonType: OrderBy
  week: OrderBy
}
"""
order by min() on columns of table "poll"
"""
input PollMinOrderBy {
  season: OrderBy
  seasonType: OrderBy
  week: OrderBy
}
"""
Ordering options when selecting data from "poll".
"""
input PollOrderBy {
  pollType: PollTypeOrderBy
  rankingsAggregate: PollRankAggregateOrderBy
  season: OrderBy
  seasonType: OrderBy
  week: OrderBy
}
"""
order by aggregate values of table "poll_rank"
"""
input PollRankAggregateOrderBy {
  avg: PollRankAvgOrderBy
  count: OrderBy
  max: PollRankMaxOrderBy
  min: PollRankMinOrderBy
  stddev: PollRankStddevOrderBy
  stddevPop: PollRankStddevPopOrderBy
  stddevSamp: PollRankStddevSampOrderBy
  sum: PollRankSumOrderBy
  varPop: PollRankVarPopOrderBy
  varSamp: PollRankVarSampOrderBy
  variance: PollRankVarianceOrderBy
}
"""
order by avg() on columns of table "poll_rank"
"""
input PollRankAvgOrderBy {
  firstPlaceVotes: OrderBy
  points: OrderBy
  rank: OrderBy
}
"""
Boolean expression to filter rows from the table "poll_rank". All fields are combined with a logical 'AND'.
"""
input PollRankBoolExp {
  _and: [PollRankBoolExp!]
  _not: PollRankBoolExp
  _or: [PollRankBoolExp!]
  firstPlaceVotes: SmallintComparisonExp
  points: IntComparisonExp
  poll: PollBoolExp
  rank: SmallintComparisonExp
  team: currentTeamsBoolExp
}
"""
order by max() on columns of table "poll_rank"
"""
input PollRankMaxOrderBy {
  firstPlaceVotes: OrderBy
  points: OrderBy
  rank: OrderBy
}
"""
order by min() on columns of table "poll_rank"
"""
input PollRankMinOrderBy {
  firstPlaceVotes: OrderBy
  points: OrderBy
  rank: OrderBy
}
"""
Ordering options when selecting data from "poll_rank".
"""
input PollRankOrderBy {
  firstPlaceVotes: OrderBy
  points: OrderBy
  poll: PollOrderBy
  rank: OrderBy
  team: currentTeamsOrderBy
}
"""
order by stddev() on columns of table "poll_rank"
"""
input PollRankStddevOrderBy {
  firstPlaceVotes: OrderBy
  points: OrderBy
  rank: OrderBy
}
"""
order by stddevPop() on columns of table "poll_rank"
"""
input PollRankStddevPopOrderBy {
  firstPlaceVotes: OrderBy
  points: OrderBy
  rank: OrderBy
}
"""
order by stddevSamp() on columns of table "poll_rank"
"""
input PollRankStddevSampOrderBy {
  firstPlaceVotes: OrderBy
  points: OrderBy
  rank: OrderBy
}
"""
order by sum() on columns of table "poll_rank"
"""
input PollRankSumOrderBy {
  firstPlaceVotes: OrderBy
  points: OrderBy
  rank: OrderBy
}
"""
order by varPop() on columns of table "poll_rank"
"""
input PollRankVarPopOrderBy {
  firstPlaceVotes: OrderBy
  points: OrderBy
  rank: OrderBy
}
"""
order by varSamp() on columns of table "poll_rank"
"""
input PollRankVarSampOrderBy {
  firstPlaceVotes: OrderBy
  points: OrderBy
  rank: OrderBy
}
"""
order by variance() on columns of table "poll_rank"
"""
input PollRankVarianceOrderBy {
  firstPlaceVotes: OrderBy
  points: OrderBy
  rank: OrderBy
}
"""
order by stddev() on columns of table "poll"
"""
input PollStddevOrderBy {
  season: OrderBy
  week: OrderBy
}
"""
order by stddevPop() on columns of table "poll"
"""
input PollStddevPopOrderBy {
  season: OrderBy
  week: OrderBy
}
"""
order by stddevSamp() on columns of table "poll"
"""
input PollStddevSampOrderBy {
  season: OrderBy
  week: OrderBy
}
"""
order by sum() on columns of table "poll"
"""
input PollSumOrderBy {
  season: OrderBy
  week: OrderBy
}
"""
Boolean expression to filter rows from the table "poll_type". All fields are combined with a logical 'AND'.
"""
input PollTypeBoolExp {
  _and: [PollTypeBoolExp!]
  _not: PollTypeBoolExp
  _or: [PollTypeBoolExp!]
  abbreviation: StringComparisonExp
  id: IntComparisonExp
  name: StringComparisonExp
  polls: PollBoolExp
  shortName: StringComparisonExp
}
"""
Ordering options when selecting data from "poll_type".
"""
input PollTypeOrderBy {
  abbreviation: OrderBy
  id: OrderBy
  name: OrderBy
  pollsAggregate: PollAggregateOrderBy
  shortName: OrderBy
}
"""
order by varPop() on columns of table "poll"
"""
input PollVarPopOrderBy {
  season: OrderBy
  week: OrderBy
}
"""
order by varSamp() on columns of table "poll"
"""
input PollVarSampOrderBy {
  season: OrderBy
  week: OrderBy
}
"""
order by variance() on columns of table "poll"
"""
input PollVarianceOrderBy {
  season: OrderBy
  week: OrderBy
}
"""
Boolean expression to filter rows from the table "position". All fields are combined with a logical 'AND'.
"""
input PositionBoolExp {
  _and: [PositionBoolExp!]
  _not: PositionBoolExp
  _or: [PositionBoolExp!]
  abbreviation: StringComparisonExp
  athletes: AthleteBoolExp
  athletesAggregate: AthleteAggregateBoolExp
  displayName: StringComparisonExp
  id: SmallintComparisonExp
  name: StringComparisonExp
}
"""
Ordering options when selecting data from "position".
"""
input PositionOrderBy {
  abbreviation: OrderBy
  athletesAggregate: AthleteAggregateOrderBy
  displayName: OrderBy
  id: OrderBy
  name: OrderBy
}
input RecruitAggregateBoolExp {
  count: recruitAggregateBoolExpCount
}
"""
order by aggregate values of table "recruit"
"""
input RecruitAggregateOrderBy {
  avg: RecruitAvgOrderBy
  count: OrderBy
  max: RecruitMaxOrderBy
  min: RecruitMinOrderBy
  stddev: RecruitStddevOrderBy
  stddevPop: RecruitStddevPopOrderBy
  stddevSamp: RecruitStddevSampOrderBy
  sum: RecruitSumOrderBy
  varPop: RecruitVarPopOrderBy
  varSamp: RecruitVarSampOrderBy
  variance: RecruitVarianceOrderBy
}
"""
order by avg() on columns of table "recruit"
"""
input RecruitAvgOrderBy {
  height: OrderBy
  id: OrderBy
  overallRank: OrderBy
  positionRank: OrderBy
  ranking: OrderBy
  rating: OrderBy
  stars: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
Boolean expression to filter rows from the table "recruit". All fields are combined with a logical 'AND'.
"""
input RecruitBoolExp {
  _and: [RecruitBoolExp!]
  _not: RecruitBoolExp
  _or: [RecruitBoolExp!]
  athlete: AthleteBoolExp
  college: currentTeamsBoolExp
  height: FloatComparisonExp
  hometown: HometownBoolExp
  id: BigintComparisonExp
  name: StringComparisonExp
  overallRank: SmallintComparisonExp
  position: RecruitPositionBoolExp
  positionRank: SmallintComparisonExp
  ranking: SmallintComparisonExp
  rating: FloatComparisonExp
  recruitSchool: RecruitSchoolBoolExp
  recruitType: RecruitTypeComparisonExp
  stars: SmallintComparisonExp
  weight: SmallintComparisonExp
  year: SmallintComparisonExp
}
"""
order by max() on columns of table "recruit"
"""
input RecruitMaxOrderBy {
  height: OrderBy
  id: OrderBy
  name: OrderBy
  overallRank: OrderBy
  positionRank: OrderBy
  ranking: OrderBy
  rating: OrderBy
  recruitType: OrderBy
  stars: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
order by min() on columns of table "recruit"
"""
input RecruitMinOrderBy {
  height: OrderBy
  id: OrderBy
  name: OrderBy
  overallRank: OrderBy
  positionRank: OrderBy
  ranking: OrderBy
  rating: OrderBy
  recruitType: OrderBy
  stars: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
Ordering options when selecting data from "recruit".
"""
input RecruitOrderBy {
  athlete: AthleteOrderBy
  college: currentTeamsOrderBy
  height: OrderBy
  hometown: HometownOrderBy
  id: OrderBy
  name: OrderBy
  overallRank: OrderBy
  position: RecruitPositionOrderBy
  positionRank: OrderBy
  ranking: OrderBy
  rating: OrderBy
  recruitSchool: RecruitSchoolOrderBy
  recruitType: OrderBy
  stars: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
Boolean expression to filter rows from the table "recruit_position". All fields are combined with a logical 'AND'.
"""
input RecruitPositionBoolExp {
  _and: [RecruitPositionBoolExp!]
  _not: RecruitPositionBoolExp
  _or: [RecruitPositionBoolExp!]
  id: SmallintComparisonExp
  position: StringComparisonExp
  positionGroup: StringComparisonExp
}
"""
Ordering options when selecting data from "recruit_position".
"""
input RecruitPositionOrderBy {
  id: OrderBy
  position: OrderBy
  positionGroup: OrderBy
}
"""
Boolean expression to filter rows from the table "recruit_school". All fields are combined with a logical 'AND'.
"""
input RecruitSchoolBoolExp {
  _and: [RecruitSchoolBoolExp!]
  _not: RecruitSchoolBoolExp
  _or: [RecruitSchoolBoolExp!]
  id: IntComparisonExp
  name: StringComparisonExp
  recruits: RecruitBoolExp
  recruitsAggregate: RecruitAggregateBoolExp
}
"""
Ordering options when selecting data from "recruit_school".
"""
input RecruitSchoolOrderBy {
  id: OrderBy
  name: OrderBy
  recruitsAggregate: RecruitAggregateOrderBy
}
"""
order by stddev() on columns of table "recruit"
"""
input RecruitStddevOrderBy {
  height: OrderBy
  id: OrderBy
  overallRank: OrderBy
  positionRank: OrderBy
  ranking: OrderBy
  rating: OrderBy
  stars: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
order by stddevPop() on columns of table "recruit"
"""
input RecruitStddevPopOrderBy {
  height: OrderBy
  id: OrderBy
  overallRank: OrderBy
  positionRank: OrderBy
  ranking: OrderBy
  rating: OrderBy
  stars: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
order by stddevSamp() on columns of table "recruit"
"""
input RecruitStddevSampOrderBy {
  height: OrderBy
  id: OrderBy
  overallRank: OrderBy
  positionRank: OrderBy
  ranking: OrderBy
  rating: OrderBy
  stars: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
order by sum() on columns of table "recruit"
"""
input RecruitSumOrderBy {
  height: OrderBy
  id: OrderBy
  overallRank: OrderBy
  positionRank: OrderBy
  ranking: OrderBy
  rating: OrderBy
  stars: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
Boolean expression to compare columns of type "recruit_type". All fields are combined with logical 'AND'.
"""
input RecruitTypeComparisonExp {
  _eq: recruit_type
  _gt: recruit_type
  _gte: recruit_type
  _in: [recruit_type!]
  _isNull: Boolean
  _lt: recruit_type
  _lte: recruit_type
  _neq: recruit_type
  _nin: [recruit_type!]
}
"""
order by varPop() on columns of table "recruit"
"""
input RecruitVarPopOrderBy {
  height: OrderBy
  id: OrderBy
  overallRank: OrderBy
  positionRank: OrderBy
  ranking: OrderBy
  rating: OrderBy
  stars: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
order by varSamp() on columns of table "recruit"
"""
input RecruitVarSampOrderBy {
  height: OrderBy
  id: OrderBy
  overallRank: OrderBy
  positionRank: OrderBy
  ranking: OrderBy
  rating: OrderBy
  stars: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
order by variance() on columns of table "recruit"
"""
input RecruitVarianceOrderBy {
  height: OrderBy
  id: OrderBy
  overallRank: OrderBy
  positionRank: OrderBy
  ranking: OrderBy
  rating: OrderBy
  stars: OrderBy
  weight: OrderBy
  year: OrderBy
}
"""
Boolean expression to filter rows from the table "recruiting_team". All fields are combined with a logical 'AND'.
"""
input RecruitingTeamBoolExp {
  _and: [RecruitingTeamBoolExp!]
  _not: RecruitingTeamBoolExp
  _or: [RecruitingTeamBoolExp!]
  id: IntComparisonExp
  points: NumericComparisonExp
  rank: SmallintComparisonExp
  team: currentTeamsBoolExp
  year: SmallintComparisonExp
}
"""
Ordering options when selecting data from "recruiting_team".
"""
input RecruitingTeamOrderBy {
  id: OrderBy
  points: OrderBy
  rank: OrderBy
  team: currentTeamsOrderBy
  year: OrderBy
}
"""
Boolean expression to filter rows from the table "scoreboard". All fields are combined with a logical 'AND'.
"""
input ScoreboardBoolExp {
  _and: [ScoreboardBoolExp!]
  _not: ScoreboardBoolExp
  _or: [ScoreboardBoolExp!]
  awayClassification: DivisionComparisonExp
  awayConference: StringComparisonExp
  awayConferenceAbbreviation: StringComparisonExp
  awayId: IntComparisonExp
  awayLineScores: SmallintArrayComparisonExp
  awayPoints: SmallintComparisonExp
  awayTeam: StringComparisonExp
  city: StringComparisonExp
  conferenceGame: BooleanComparisonExp
  currentClock: StringComparisonExp
  currentPeriod: SmallintComparisonExp
  currentPossession: StringComparisonExp
  currentSituation: StringComparisonExp
  homeClassification: DivisionComparisonExp
  homeConference: StringComparisonExp
  homeConferenceAbbreviation: StringComparisonExp
  homeId: IntComparisonExp
  homeLineScores: SmallintArrayComparisonExp
  homePoints: SmallintComparisonExp
  homeTeam: StringComparisonExp
  id: IntComparisonExp
  lastPlay: StringComparisonExp
  moneylineAway: IntComparisonExp
  moneylineHome: IntComparisonExp
  neutralSite: BooleanComparisonExp
  overUnder: NumericComparisonExp
  spread: NumericComparisonExp
  startDate: TimestamptzComparisonExp
  startTimeTbd: BooleanComparisonExp
  state: StringComparisonExp
  status: GameStatusComparisonExp
  temperature: NumericComparisonExp
  tv: StringComparisonExp
  venue: StringComparisonExp
  weatherDescription: StringComparisonExp
  windDirection: NumericComparisonExp
  windSpeed: NumericComparisonExp
}
"""
Ordering options when selecting data from "scoreboard".
"""
input ScoreboardOrderBy {
  awayClassification: OrderBy
  awayConference: OrderBy
  awayConferenceAbbreviation: OrderBy
  awayId: OrderBy
  awayLineScores: OrderBy
  awayPoints: OrderBy
  awayTeam: OrderBy
  city: OrderBy
  conferenceGame: OrderBy
  currentClock: OrderBy
  currentPeriod: OrderBy
  currentPossession: OrderBy
  currentSituation: OrderBy
  homeClassification: OrderBy
  homeConference: OrderBy
  homeConferenceAbbreviation: OrderBy
  homeId: OrderBy
  homeLineScores: OrderBy
  homePoints: OrderBy
  homeTeam: OrderBy
  id: OrderBy
  lastPlay: OrderBy
  moneylineAway: OrderBy
  moneylineHome: OrderBy
  neutralSite: OrderBy
  overUnder: OrderBy
  spread: OrderBy
  startDate: OrderBy
  startTimeTbd: OrderBy
  state: OrderBy
  status: OrderBy
  temperature: OrderBy
  tv: OrderBy
  venue: OrderBy
  weatherDescription: OrderBy
  windDirection: OrderBy
  windSpeed: OrderBy
}
"""
Boolean expression to compare columns of type "season_type". All fields are combined with logical 'AND'.
"""
input SeasonTypeComparisonExp {
  _eq: season_type
  _gt: season_type
  _gte: season_type
  _in: [season_type!]
  _isNull: Boolean
  _lt: season_type
  _lte: season_type
  _neq: season_type
  _nin: [season_type!]
}
"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input SmallintArrayComparisonExp {
  "is the array contained in the given array value"
  _containedIn: [smallint!]
  "does the array contain the given value"
  _contains: [smallint!]
  _eq: [smallint!]
  _gt: [smallint!]
  _gte: [smallint!]
  _in: [[smallint!]!]
  _isNull: Boolean
  _lt: [smallint!]
  _lte: [smallint!]
  _neq: [smallint!]
  _nin: [[smallint!]!]
}
"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input SmallintComparisonExp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _isNull: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}
"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input StringArrayComparisonExp {
  "is the array contained in the given array value"
  _containedIn: [String!]
  "does the array contain the given value"
  _contains: [String!]
  _eq: [String!]
  _gt: [String!]
  _gte: [String!]
  _in: [[String!]!]
  _isNull: Boolean
  _lt: [String!]
  _lte: [String!]
  _neq: [String!]
  _nin: [[String!]!]
}
"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String
  "does the column match the given case-insensitive pattern"
  _ilike: String
  _in: [String!]
  "does the column match the given POSIX regular expression, case insensitive"
  _iregex: String
  _isNull: Boolean
  "does the column match the given pattern"
  _like: String
  _lt: String
  _lte: String
  _neq: String
  "does the column NOT match the given case-insensitive pattern"
  _nilike: String
  _nin: [String!]
  "does the column NOT match the given POSIX regular expression, case insensitive"
  _niregex: String
  "does the column NOT match the given pattern"
  _nlike: String
  "does the column NOT match the given POSIX regular expression, case sensitive"
  _nregex: String
  "does the column NOT match the given SQL regular expression"
  _nsimilar: String
  "does the column match the given POSIX regular expression, case sensitive"
  _regex: String
  "does the column match the given SQL regular expression"
  _similar: String
}
"""
Boolean expression to filter rows from the table "team_talent". All fields are combined with a logical 'AND'.
"""
input TeamTalentBoolExp {
  _and: [TeamTalentBoolExp!]
  _not: TeamTalentBoolExp
  _or: [TeamTalentBoolExp!]
  talent: NumericComparisonExp
  team: currentTeamsBoolExp
  year: SmallintComparisonExp
}
"""
Ordering options when selecting data from "team_talent".
"""
input TeamTalentOrderBy {
  talent: OrderBy
  team: currentTeamsOrderBy
  year: OrderBy
}
"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input TimestampComparisonExp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _isNull: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}
"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _isNull: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
"""
Boolean expression to filter rows from the table "transfer". All fields are combined with a logical 'AND'.
"""
input TransferBoolExp {
  _and: [TransferBoolExp!]
  _not: TransferBoolExp
  _or: [TransferBoolExp!]
  eligibility: StringComparisonExp
  firstName: StringComparisonExp
  fromTeam: currentTeamsBoolExp
  lastName: StringComparisonExp
  position: RecruitPositionBoolExp
  rating: NumericComparisonExp
  season: SmallintComparisonExp
  stars: SmallintComparisonExp
  toTeam: currentTeamsBoolExp
  transferDate: TimestampComparisonExp
}
"""
Ordering options when selecting data from "transfer".
"""
input TransferOrderBy {
  eligibility: OrderBy
  firstName: OrderBy
  fromTeam: currentTeamsOrderBy
  lastName: OrderBy
  position: RecruitPositionOrderBy
  rating: OrderBy
  season: OrderBy
  stars: OrderBy
  toTeam: currentTeamsOrderBy
  transferDate: OrderBy
}
"""
Boolean expression to filter rows from the table "weather_condition". All fields are combined with a logical 'AND'.
"""
input WeatherConditionBoolExp {
  _and: [WeatherConditionBoolExp!]
  _not: WeatherConditionBoolExp
  _or: [WeatherConditionBoolExp!]
  description: StringComparisonExp
  id: SmallintComparisonExp
}
"""
Ordering options when selecting data from "weather_condition".
"""
input WeatherConditionOrderBy {
  description: OrderBy
  id: OrderBy
}
input adjustedPlayerMetricsAggregateBoolExpCount {
  arguments: [AdjustedPlayerMetricsSelectColumn!]
  distinct: Boolean
  filter: AdjustedPlayerMetricsBoolExp
  predicate: IntComparisonExp!
}
input athleteAggregateBoolExpCount {
  arguments: [AthleteSelectColumn!]
  distinct: Boolean
  filter: AthleteBoolExp
  predicate: IntComparisonExp!
}
input athleteTeamAggregateBoolExpCount {
  arguments: [AthleteTeamSelectColumn!]
  distinct: Boolean
  filter: AthleteTeamBoolExp
  predicate: IntComparisonExp!
}
input coachSeasonAggregateBoolExpCount {
  arguments: [CoachSeasonSelectColumn!]
  distinct: Boolean
  filter: CoachSeasonBoolExp
  predicate: IntComparisonExp!
}
"""
Boolean expression to filter rows from the table "current_conferences". All fields are combined with a logical 'AND'.
"""
input currentTeamsBoolExp {
  _and: [currentTeamsBoolExp!]
  _not: currentTeamsBoolExp
  _or: [currentTeamsBoolExp!]
  abbreviation: StringComparisonExp
  classification: DivisionComparisonExp
  conference: StringComparisonExp
  conferenceId: SmallintComparisonExp
  division: StringComparisonExp
  school: StringComparisonExp
  teamId: IntComparisonExp
}
"""
Ordering options when selecting data from "current_conferences".
"""
input currentTeamsOrderBy {
  abbreviation: OrderBy
  classification: OrderBy
  conference: OrderBy
  conferenceId: OrderBy
  division: OrderBy
  school: OrderBy
  teamId: OrderBy
}
input draftPicksAggregateBoolExpCount {
  arguments: [DraftPicksSelectColumn!]
  distinct: Boolean
  filter: DraftPicksBoolExp
  predicate: IntComparisonExp!
}
"""
Boolean expression to filter rows from the table "game_info". All fields are combined with a logical 'AND'.
"""
input gameBoolExp {
  _and: [gameBoolExp!]
  _not: gameBoolExp
  _or: [gameBoolExp!]
  attendance: IntComparisonExp
  awayClassification: DivisionComparisonExp
  awayConference: StringComparisonExp
  awayConferenceId: SmallintComparisonExp
  awayConferenceInfo: ConferenceBoolExp
  awayEndElo: IntComparisonExp
  awayLineScores: SmallintArrayComparisonExp
  awayPoints: SmallintComparisonExp
  awayPostgameWinProb: NumericComparisonExp
  awayStartElo: IntComparisonExp
  awayTeam: StringComparisonExp
  awayTeamId: IntComparisonExp
  awayTeamInfo: currentTeamsBoolExp
  conferenceGame: BooleanComparisonExp
  excitement: NumericComparisonExp
  homeClassification: DivisionComparisonExp
  homeConference: StringComparisonExp
  homeConferenceId: SmallintComparisonExp
  homeConferenceInfo: ConferenceBoolExp
  homeEndElo: IntComparisonExp
  homeLineScores: SmallintArrayComparisonExp
  homePoints: SmallintComparisonExp
  homePostgameWinProb: NumericComparisonExp
  homeStartElo: IntComparisonExp
  homeTeam: StringComparisonExp
  homeTeamId: IntComparisonExp
  homeTeamInfo: currentTeamsBoolExp
  id: IntComparisonExp
  lines: GameLinesBoolExp
  linesAggregate: GameLinesAggregateBoolExp
  mediaInfo: GameMediaBoolExp
  neutralSite: BooleanComparisonExp
  notes: StringComparisonExp
  season: SmallintComparisonExp
  seasonType: SeasonTypeComparisonExp
  startDate: TimestampComparisonExp
  startTimeTbd: BooleanComparisonExp
  status: GameStatusComparisonExp
  venueId: IntComparisonExp
  weather: GameWeatherBoolExp
  week: SmallintComparisonExp
}
input gameLinesAggregateBoolExpCount {
  arguments: [GameLinesSelectColumn!]
  distinct: Boolean
  filter: GameLinesBoolExp
  predicate: IntComparisonExp!
}
"""
Ordering options when selecting data from "game_info".
"""
input gameOrderBy {
  attendance: OrderBy
  awayClassification: OrderBy
  awayConference: OrderBy
  awayConferenceId: OrderBy
  awayConferenceInfo: ConferenceOrderBy
  awayEndElo: OrderBy
  awayLineScores: OrderBy
  awayPoints: OrderBy
  awayPostgameWinProb: OrderBy
  awayStartElo: OrderBy
  awayTeam: OrderBy
  awayTeamId: OrderBy
  awayTeamInfo: currentTeamsOrderBy
  conferenceGame: OrderBy
  excitement: OrderBy
  homeClassification: OrderBy
  homeConference: OrderBy
  homeConferenceId: OrderBy
  homeConferenceInfo: ConferenceOrderBy
  homeEndElo: OrderBy
  homeLineScores: OrderBy
  homePoints: OrderBy
  homePostgameWinProb: OrderBy
  homeStartElo: OrderBy
  homeTeam: OrderBy
  homeTeamId: OrderBy
  homeTeamInfo: currentTeamsOrderBy
  id: OrderBy
  linesAggregate: GameLinesAggregateOrderBy
  mediaInfoAggregate: GameMediaAggregateOrderBy
  neutralSite: OrderBy
  notes: OrderBy
  season: OrderBy
  seasonType: OrderBy
  startDate: OrderBy
  startTimeTbd: OrderBy
  status: OrderBy
  venueId: OrderBy
  weather: GameWeatherOrderBy
  week: OrderBy
}
input gamePlayerStatAggregateBoolExpCount {
  arguments: [GamePlayerStatSelectColumn!]
  distinct: Boolean
  filter: GamePlayerStatBoolExp
  predicate: IntComparisonExp!
}
"""
Boolean expression to filter rows from the table "team_info". All fields are combined with a logical 'AND'.
"""
input historicalTeamBoolExp {
  _and: [historicalTeamBoolExp!]
  _not: historicalTeamBoolExp
  _or: [historicalTeamBoolExp!]
  abbreviation: StringComparisonExp
  active: BooleanComparisonExp
  altColor: StringComparisonExp
  altName: StringComparisonExp
  classification: DivisionComparisonExp
  color: StringComparisonExp
  conference: StringComparisonExp
  conferenceAbbreviation: StringComparisonExp
  conferenceId: SmallintComparisonExp
  conferenceShortName: StringComparisonExp
  countryCode: StringComparisonExp
  displayName: StringComparisonExp
  division: StringComparisonExp
  endYear: SmallintComparisonExp
  id: IntComparisonExp
  images: StringArrayComparisonExp
  mascot: StringComparisonExp
  ncaaName: StringComparisonExp
  nickname: StringComparisonExp
  school: StringComparisonExp
  shortDisplayName: StringComparisonExp
  startYear: SmallintComparisonExp
  twitter: StringComparisonExp
}
"""
Ordering options when selecting data from "team_info".
"""
input historicalTeamOrderBy {
  abbreviation: OrderBy
  active: OrderBy
  altColor: OrderBy
  altName: OrderBy
  classification: OrderBy
  color: OrderBy
  conference: OrderBy
  conferenceAbbreviation: OrderBy
  conferenceId: OrderBy
  conferenceShortName: OrderBy
  countryCode: OrderBy
  displayName: OrderBy
  division: OrderBy
  endYear: OrderBy
  id: OrderBy
  images: OrderBy
  mascot: OrderBy
  ncaaName: OrderBy
  nickname: OrderBy
  school: OrderBy
  shortDisplayName: OrderBy
  startYear: OrderBy
  twitter: OrderBy
}
"""
Boolean expression to filter rows from the table "ppa". All fields are combined with a logical 'AND'.
"""
input predictedPointsBoolExp {
  _and: [predictedPointsBoolExp!]
  _not: predictedPointsBoolExp
  _or: [predictedPointsBoolExp!]
  distance: SmallintComparisonExp
  down: SmallintComparisonExp
  predictedPoints: NumericComparisonExp
  yardLine: SmallintComparisonExp
}
"""
Ordering options when selecting data from "ppa".
"""
input predictedPointsOrderBy {
  distance: OrderBy
  down: OrderBy
  predictedPoints: OrderBy
  yardLine: OrderBy
}
"""
Boolean expression to filter rows from the table "rating_systems". All fields are combined with a logical 'AND'.
"""
input ratingsBoolExp {
  _and: [ratingsBoolExp!]
  _not: ratingsBoolExp
  _or: [ratingsBoolExp!]
  conference: StringComparisonExp
  conferenceId: SmallintComparisonExp
  elo: IntComparisonExp
  fpi: NumericComparisonExp
  fpiAvgWinProbabilityRank: SmallintComparisonExp
  fpiDefensiveEfficiency: NumericComparisonExp
  fpiGameControlRank: SmallintComparisonExp
  fpiOffensiveEfficiency: NumericComparisonExp
  fpiOverallEfficiency: NumericComparisonExp
  fpiRemainingSosRank: SmallintComparisonExp
  fpiResumeRank: SmallintComparisonExp
  fpiSosRank: SmallintComparisonExp
  fpiSpecialTeamsEfficiency: NumericComparisonExp
  fpiStrengthOfRecordRank: SmallintComparisonExp
  spDefense: NumericComparisonExp
  spOffense: NumericComparisonExp
  spOverall: NumericComparisonExp
  spSpecialTeams: NumericComparisonExp
  srs: NumericComparisonExp
  team: StringComparisonExp
  teamId: IntComparisonExp
  year: SmallintComparisonExp
}
"""
Ordering options when selecting data from "rating_systems".
"""
input ratingsOrderBy {
  conference: OrderBy
  conferenceId: OrderBy
  elo: OrderBy
  fpi: OrderBy
  fpiAvgWinProbabilityRank: OrderBy
  fpiDefensiveEfficiency: OrderBy
  fpiGameControlRank: OrderBy
  fpiOffensiveEfficiency: OrderBy
  fpiOverallEfficiency: OrderBy
  fpiRemainingSosRank: OrderBy
  fpiResumeRank: OrderBy
  fpiSosRank: OrderBy
  fpiSpecialTeamsEfficiency: OrderBy
  fpiStrengthOfRecordRank: OrderBy
  spDefense: OrderBy
  spOffense: OrderBy
  spOverall: OrderBy
  spSpecialTeams: OrderBy
  srs: OrderBy
  team: OrderBy
  teamId: OrderBy
  year: OrderBy
}
input recruitAggregateBoolExpCount {
  arguments: [RecruitSelectColumn!]
  distinct: Boolean
  filter: RecruitBoolExp
  predicate: IntComparisonExp!
}
"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "measured in seconds"
    ttl: Int! = 60,
    "refresh the cache entry"
    refresh: Boolean! = false
  ) on QUERY

